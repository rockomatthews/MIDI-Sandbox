import {
  __commonJS
} from "./chunk-4EOJPDL2.js";

// node_modules/jazz-midi/skip.js
var require_skip = __commonJS({
  "node_modules/jazz-midi/skip.js"(exports, module) {
    module.exports = void 0;
  }
});

// node_modules/jzz/javascript/JZZ.js
var require_JZZ = __commonJS({
  "node_modules/jzz/javascript/JZZ.js"(exports, module) {
    (function(global2, factory) {
      if (typeof exports === "object" && typeof module !== "undefined") {
        module.exports = factory();
      } else if (typeof define === "function" && define.amd) {
        define("JZZ", [], factory);
      } else {
        if (!global2)
          global2 = window;
        if (global2.JZZ && global2.JZZ.MIDI)
          return;
        global2.JZZ = factory();
      }
    })(exports, function() {
      var _scope = typeof window === "undefined" ? global : window;
      var _version = "1.6.3";
      var i, j, k, m, n;
      var _time = Date.now || function() {
        return (/* @__PURE__ */ new Date()).getTime();
      };
      var _startTime = _time();
      var _now = typeof performance != "undefined" && performance.now ? function() {
        return performance.now();
      } : function() {
        return _time() - _startTime;
      };
      var _schedule = function(f) {
        setTimeout(f, 0);
      };
      function _nop() {
      }
      function _func(f) {
        return typeof f == "function";
      }
      function _R() {
        this._orig = this;
        this._ready = false;
        this._queue = [];
        this._log = [];
      }
      _R.prototype._exec = function() {
        while (this._ready && this._queue.length) {
          var x = this._queue.shift();
          x[0].apply(this, x[1]);
        }
      };
      _R.prototype._push = function(func, arg) {
        this._queue.push([func, arg]);
        _R.prototype._exec.apply(this);
      };
      _R.prototype._slip = function(func, arg) {
        this._queue.unshift([func, arg]);
      };
      _R.prototype._pause = function() {
        this._ready = false;
      };
      _R.prototype._resume = function() {
        this._ready = true;
        _R.prototype._exec.apply(this);
      };
      _R.prototype._break = function(err) {
        this._orig._bad = true;
        this._orig._log.push(err || "Unknown JZZ error");
      };
      _R.prototype._repair = function() {
        this._orig._bad = false;
      };
      _R.prototype._crash = function(err) {
        this._break(err);
        this._resume();
      };
      _R.prototype._err = function() {
        return this._log[this._log.length - 1];
      };
      _R.prototype.log = function() {
        return _clone(this._log);
      };
      _R.prototype._dup = function() {
        var F = function() {
        };
        F.prototype = this._orig;
        var ret = new F();
        ret._ready = false;
        ret._queue = [];
        return ret;
      };
      _R.prototype._image = function() {
        return this._dup();
      };
      _R.prototype._thenable = function() {
        if (this.then)
          return this;
        var self = this;
        var F = function() {
        };
        F.prototype = self;
        var ret = new F();
        ret.then = function(good, bad) {
          self._push(_then, [good, bad]);
          return this;
        };
        return ret;
      };
      function _then(good, bad) {
        if (this._bad) {
          if (_func(bad))
            bad.apply(this, [new Error(this._err())]);
        } else {
          if (_func(good))
            good.apply(this, [this]);
        }
      }
      function _wait(obj, delay) {
        if (this._bad)
          obj._crash(this._err());
        else
          setTimeout(function() {
            obj._resume();
          }, delay);
      }
      _R.prototype.wait = function(delay) {
        if (!delay)
          return this;
        var ret = this._image();
        this._push(_wait, [ret, delay]);
        return ret._thenable();
      };
      function _kick(obj) {
        if (this._bad)
          obj._break(this._err());
        obj._resume();
      }
      function _rechain(self, obj, name) {
        self[name] = function() {
          var arg = arguments;
          var ret = obj._image();
          this._push(_kick, [ret]);
          return ret[name].apply(ret, arg);
        };
      }
      function _and(q) {
        if (!this._bad) {
          if (_func(q))
            q.apply(this);
          else
            console.log(q);
        }
      }
      _R.prototype.and = function(func) {
        this._push(_and, [func]);
        return this._thenable();
      };
      function _or(q) {
        if (this._bad) {
          if (_func(q))
            q.apply(this);
          else
            console.log(q);
        }
      }
      _R.prototype.or = function(func) {
        this._push(_or, [func]);
        return this._thenable();
      };
      _R.prototype._info = {};
      _R.prototype.info = function() {
        var info = _clone(this._orig._info);
        if (typeof info.engine == "undefined")
          info.engine = "none";
        if (typeof info.sysex == "undefined")
          info.sysex = true;
        return info;
      };
      _R.prototype.name = function() {
        return this.info().name;
      };
      function _close(obj) {
        if (this._bad)
          obj._crash(this._err());
        else {
          this._break("Closed");
          obj._resume();
        }
      }
      _R.prototype.close = function() {
        var ret = new _R();
        if (this._close)
          this._push(this._close, []);
        this._push(_close, [ret]);
        return ret._thenable();
      };
      function _tryAny(arr) {
        if (!arr.length) {
          this._break();
          return;
        }
        var func = arr.shift();
        if (arr.length) {
          var self = this;
          this._slip(_or, [function() {
            _tryAny.apply(self, [arr]);
          }]);
        }
        try {
          this._repair();
          func.apply(this);
        } catch (err) {
          this._break(err.toString());
        }
      }
      function _push(arr, obj) {
        for (var i2 = 0; i2 < arr.length; i2++)
          if (arr[i2] === obj)
            return;
        arr.push(obj);
      }
      function _pop(arr, obj) {
        for (var i2 = 0; i2 < arr.length; i2++)
          if (arr[i2] === obj) {
            arr.splice(i2, 1);
            return;
          }
      }
      function _J() {
        _R.apply(this);
      }
      _J.prototype = new _R();
      function _for(x, f) {
        for (var k2 in x)
          if (x.hasOwnProperty(k2))
            f.call(this, k2);
      }
      function _clone(obj, key, val) {
        if (typeof key == "undefined")
          return _clone(obj, [], []);
        if (obj instanceof Object) {
          for (var i2 = 0; i2 < key.length; i2++)
            if (key[i2] === obj)
              return val[i2];
          var ret;
          if (obj instanceof Array)
            ret = [];
          else
            ret = {};
          key.push(obj);
          val.push(ret);
          _for(obj, function(k2) {
            ret[k2] = _clone(obj[k2], key, val);
          });
          return ret;
        }
        return obj;
      }
      _J.prototype._info = { name: "JZZ.js", ver: _version, version: _version, inputs: [], outputs: [] };
      var _outs = [];
      var _ins = [];
      var _outsW = [];
      var _insW = [];
      var _outsM = {};
      var _insM = {};
      function _postRefresh() {
        _jzz._info.engine = _engine._type;
        _jzz._info.version = _engine._version;
        _jzz._info.sysex = _engine._sysex;
        _jzz._info.inputs = [];
        _jzz._info.outputs = [];
        _outs = [];
        _ins = [];
        _engine._allOuts = {};
        _engine._allIns = {};
        var i2, x;
        for (i2 = 0; i2 < _engine._outs.length; i2++) {
          x = _engine._outs[i2];
          if (_outsM[x.name])
            continue;
          x.engine = _engine;
          _engine._allOuts[x.name] = x;
          _jzz._info.outputs.push({
            id: x.name,
            name: x.name,
            manufacturer: x.manufacturer,
            version: x.version,
            engine: _engine._type
          });
          _outs.push(x);
        }
        for (i2 = 0; i2 < _virtual._outs.length; i2++) {
          x = _virtual._outs[i2];
          if (_outsM[x.name])
            continue;
          _jzz._info.outputs.push({
            id: x.name,
            name: x.name,
            manufacturer: x.manufacturer,
            version: x.version,
            engine: x.type
          });
          _outs.push(x);
        }
        for (i2 = 0; i2 < _engine._ins.length; i2++) {
          x = _engine._ins[i2];
          if (_insM[x.name])
            continue;
          x.engine = _engine;
          _engine._allIns[x.name] = x;
          _jzz._info.inputs.push({
            id: x.name,
            name: x.name,
            manufacturer: x.manufacturer,
            version: x.version,
            engine: _engine._type
          });
          _ins.push(x);
        }
        for (i2 = 0; i2 < _virtual._ins.length; i2++) {
          x = _virtual._ins[i2];
          if (_insM[x.name])
            continue;
          _jzz._info.inputs.push({
            id: x.name,
            name: x.name,
            manufacturer: x.manufacturer,
            version: x.version,
            engine: x.type
          });
          _ins.push(x);
        }
        if (_jzz._watcher && _jzz._watcher._handles.length) {
          var diff = _diff(_insW, _outsW, _jzz._info.inputs, _jzz._info.outputs);
          if (diff) {
            for (j = 0; j < diff.inputs.removed.length; j++) {
              x = _engine._inMap[diff.inputs.removed[j].name];
              if (x)
                x._closeAll();
            }
            for (j = 0; j < diff.outputs.removed.length; j++) {
              x = _engine._outMap[diff.outputs.removed[j].name];
              if (x)
                x._closeAll();
            }
            _fireW(diff);
          }
        }
        _insW = _jzz._info.inputs;
        _outsW = _jzz._info.outputs;
      }
      function _refresh() {
        if (!this._bad)
          _engine._refresh(this);
      }
      _J.prototype.refresh = function() {
        this._push(_refresh, []);
        return this._thenable();
      };
      function _filterList(q, arr) {
        var i2, n2;
        if (_func(q))
          q = q(arr);
        if (!(q instanceof Array))
          q = [q];
        var before = [];
        var after = [];
        var etc = arr.slice();
        var a = before;
        for (i2 = 0; i2 < q.length; i2++) {
          if (typeof q[i2] == "undefined")
            a = after;
          else if (q[i2] instanceof RegExp)
            for (n2 = 0; n2 < etc.length; n2++) {
              if (q[i2].test(etc[n2].name)) {
                a.push(etc[n2]);
                etc.splice(n2, 1);
                n2--;
              }
            }
          else {
            for (n2 = 0; n2 < etc.length; n2++)
              if (q[i2] + "" === n2 + "" || q[i2] === etc[n2].name || q[i2] instanceof Object && q[i2].name === etc[n2].name) {
                a.push(etc[n2]);
                etc.splice(n2, 1);
                n2--;
              }
          }
        }
        return a == before ? before : before.concat(etc).concat(after);
      }
      function _notFound(port, q) {
        var msg;
        if (q instanceof RegExp)
          msg = "Port matching " + q + " not found";
        else if (q instanceof Object || typeof q == "undefined")
          msg = "Port not found";
        else
          msg = 'Port "' + q + '" not found';
        port._crash(msg);
      }
      function _openMidiOut(port, arg) {
        if (this._bad)
          port._crash(this._err());
        else {
          var arr = _filterList(arg, _outs);
          if (!arr.length) {
            _notFound(port, arg);
            return;
          }
          var pack = function(x) {
            return function() {
              x.engine._openOut(this, x.name);
            };
          };
          for (var i2 = 0; i2 < arr.length; i2++)
            arr[i2] = pack(arr[i2]);
          port._slip(_tryAny, [arr]);
          port._resume();
        }
      }
      _J.prototype.openMidiOut = function(arg) {
        var port = new _M();
        this._push(_refresh, []);
        this._push(_openMidiOut, [port, arg]);
        return port._thenable();
      };
      _J.prototype._openMidiOutNR = function(arg) {
        var port = new _M();
        this._push(_openMidiOut, [port, arg]);
        return port._thenable();
      };
      function _openMidiIn(port, arg) {
        if (this._bad)
          port._crash(this._err());
        else {
          var arr = _filterList(arg, _ins);
          if (!arr.length) {
            _notFound(port, arg);
            return;
          }
          var pack = function(x) {
            return function() {
              x.engine._openIn(this, x.name);
            };
          };
          for (var i2 = 0; i2 < arr.length; i2++)
            arr[i2] = pack(arr[i2]);
          port._slip(_tryAny, [arr]);
          port._resume();
        }
      }
      _J.prototype.openMidiIn = function(arg) {
        var port = new _M();
        this._push(_refresh, []);
        this._push(_openMidiIn, [port, arg]);
        return port._thenable();
      };
      _J.prototype._openMidiInNR = function(arg) {
        var port = new _M();
        this._push(_openMidiIn, [port, arg]);
        return port._thenable();
      };
      function _onChange(watcher, arg) {
        if (this._bad)
          watcher._crash();
        else {
          watcher._slip(_connectW, [arg]);
          watcher._resume();
        }
      }
      _J.prototype.onChange = function(arg) {
        if (!this._orig._watcher)
          this._orig._watcher = new _W();
        var watcher = this._orig._watcher._image();
        this._push(_onChange, [watcher, arg]);
        return watcher._thenable();
      };
      _J.prototype._close = function() {
        _engine._close();
      };
      function _M() {
        _R.apply(this);
        this._handles = [];
        this._outs = [];
      }
      _M.prototype = new _R();
      _M.prototype._filter = function(msg) {
        if (this._orig._mpe) {
          var out;
          var outs = 0;
          if (this._handles && this._handles.length) {
            outs = this._handles.length;
            out = this._handles[0];
          }
          if (this._outs && this._outs.length) {
            outs = this._outs.length;
            out = this._outs[0];
          }
          if (outs == 1 && !out._mpe) {
            msg = this._orig._mpe.filter(msg);
          }
        }
        return msg;
      };
      _M.prototype._receive = function(msg) {
        this._emit(this._filter(msg));
      };
      function _receive(msg) {
        if (!this._bad)
          this._receive(msg);
      }
      _M.prototype.send = function() {
        this._push(_receive, [MIDI.apply(null, arguments)]);
        return this._thenable();
      };
      _M.prototype.note = function(c, n2, v, t) {
        this.noteOn(c, n2, v);
        if (typeof this._ch == "undefined" && typeof this._master == "undefined") {
          if (t > 0)
            this.wait(t).noteOff(c, n2);
        } else {
          if (v > 0)
            this.wait(v).noteOff(c);
        }
        return this._thenable();
      };
      _M.prototype._emit = function(msg) {
        var i2;
        for (i2 = 0; i2 < this._handles.length; i2++)
          this._handles[i2].apply(this, [MIDI(msg)._stamp(this)]);
        for (i2 = 0; i2 < this._outs.length; i2++) {
          var m2 = MIDI(msg);
          if (!m2._stamped(this._outs[i2]))
            this._outs[i2].send(m2._stamp(this));
        }
      };
      function _emit(msg) {
        this._emit(msg);
      }
      _M.prototype.emit = function(msg) {
        this._push(_emit, [msg]);
        return this._thenable();
      };
      function _connect(arg) {
        if (_func(arg))
          _push(this._orig._handles, arg);
        else
          _push(this._orig._outs, arg);
      }
      function _disconnect(arg) {
        if (typeof arg == "undefined") {
          this._orig._handles = [];
          this._orig._outs = [];
        } else if (_func(arg))
          _pop(this._orig._handles, arg);
        else
          _pop(this._orig._outs, arg);
      }
      _M.prototype.connect = function(arg) {
        this._push(_connect, [arg]);
        return this._thenable();
      };
      _M.prototype.disconnect = function(arg) {
        this._push(_disconnect, [arg]);
        return this._thenable();
      };
      _M.prototype.connected = function() {
        return this._orig._handles.length + this._orig._outs.length;
      };
      _M.prototype._image = function() {
        var dup = this._dup();
        dup._ch = this._ch;
        dup._sxid = this._sxid;
        dup._master = this._master;
        dup._band = this._band;
        return dup;
      };
      _M.prototype._ch = void 0;
      _M.prototype._sxid = 127;
      _M.prototype._master = void 0;
      _M.prototype._band = void 0;
      _M.prototype.sxId = function(id) {
        if (typeof id == "undefined")
          id = _M.prototype._sxid;
        if (id == this._sxid)
          return this._thenable();
        id = _7b(id);
        var img = this._image();
        img._sxid = id;
        this._push(_kick, [img]);
        return img._thenable();
      };
      _M.prototype.ch = function(c) {
        if (c == this._ch || typeof c == "undefined" && typeof this._ch == "undefined")
          return this._thenable();
        var img = this._image();
        if (typeof c != "undefined")
          c = _ch(c);
        img._ch = c;
        img._master = void 0;
        img._band = void 0;
        this._push(_kick, [img]);
        return img._thenable();
      };
      function _mpe(m2, n2) {
        if (!this._orig._mpe)
          this._orig._mpe = new MPE();
        this._orig._mpe.setup(m2, n2);
      }
      _M.prototype.mpe = function(m2, n2) {
        if (m2 == this._master && n2 == this._band || typeof m2 == "undefined" && typeof this._master == "undefined")
          return this._thenable();
        if (typeof m2 != "undefined")
          MPE.validate(m2, n2);
        if (!n2)
          return this.ch(m2);
        var img = this._image();
        img._ch = void 0;
        img._master = m2;
        img._band = n2;
        this._push(_mpe, [m2, n2]);
        this._push(_kick, [img]);
        return img._thenable();
      };
      function _validateChannel(c) {
        if (c != parseInt(c) || c < 0 || c > 15)
          throw RangeError("Bad channel value (must not be less than 0 or more than 15): " + c);
      }
      function _W() {
        _R.apply(this);
        this._handles = [];
        _rechain(this, _jzz, "refresh");
        _rechain(this, _jzz, "openMidiOut");
        _rechain(this, _jzz, "openMidiIn");
        _rechain(this, _jzz, "onChange");
        _rechain(this, _jzz, "close");
      }
      _W.prototype = new _R();
      function _connectW(arg) {
        if (_func(arg)) {
          if (!this._orig._handles.length)
            _engine._watch();
          _push(this._orig._handles, arg);
        }
      }
      function _disconnectW(arg) {
        if (typeof arg == "undefined")
          this._orig._handles = [];
        else
          _pop(this._orig._handles, arg);
        if (!this._orig._handles.length)
          _engine._unwatch();
      }
      _W.prototype.connect = function(arg) {
        this._push(_connectW, [arg]);
        return this._thenable();
      };
      _W.prototype.disconnect = function(arg) {
        this._push(_disconnectW, [arg]);
        return this._thenable();
      };
      function _changed(x0, y0, x1, y1) {
        var i2;
        if (x0.length != x1.length || y0.length != y1.length)
          return true;
        for (i2 = 0; i2 < x0.length; i2++)
          if (x0[i2].name != x1[i2].name)
            return true;
        for (i2 = 0; i2 < y0.length; i2++)
          if (y0[i2].name != y1[i2].name)
            return true;
        return false;
      }
      function _diff(x0, y0, x1, y1) {
        if (!_changed(x0, y0, x1, y1))
          return;
        var ax = [];
        var ay = [];
        var rx = [];
        var ry = [];
        var i2;
        var h = {};
        for (i2 = 0; i2 < x0.length; i2++)
          h[x0[i2].name] = true;
        for (i2 = 0; i2 < x1.length; i2++)
          if (!h[x1[i2].name])
            ax.push(x1[i2]);
        h = {};
        for (i2 = 0; i2 < x1.length; i2++)
          h[x1[i2].name] = true;
        for (i2 = 0; i2 < x0.length; i2++)
          if (!h[x0[i2].name])
            rx.push(x0[i2]);
        h = {};
        for (i2 = 0; i2 < y0.length; i2++)
          h[y0[i2].name] = true;
        for (i2 = 0; i2 < y1.length; i2++)
          if (!h[y1[i2].name])
            ay.push(y1[i2]);
        h = {};
        for (i2 = 0; i2 < y1.length; i2++)
          h[y1[i2].name] = true;
        for (i2 = 0; i2 < y0.length; i2++)
          if (!h[y0[i2].name])
            ry.push(y0[i2]);
        return { inputs: { added: ax, removed: rx }, outputs: { added: ay, removed: ry } };
      }
      function _fireW(arg) {
        for (i = 0; i < _jzz._watcher._handles.length; i++)
          _jzz._watcher._handles[i].apply(_jzz, [arg]);
      }
      var _jzz;
      var _engine = { _outs: [], _ins: [] };
      var _virtual = { _outs: [], _ins: [] };
      function _tryNODE() {
        if (typeof module != "undefined" && module.exports) {
          var jazzmidi = require_skip();
          if (jazzmidi) {
            _initNode(jazzmidi);
            return;
          }
        }
        this._break();
      }
      function _tryJazzPlugin() {
        var div = document.createElement("div");
        div.style.visibility = "hidden";
        document.body.appendChild(div);
        var obj = document.createElement("object");
        obj.style.visibility = "hidden";
        obj.style.width = "0px";
        obj.style.height = "0px";
        obj.classid = "CLSID:1ACE1618-1C7D-4561-AEE1-34842AA85E90";
        obj.type = "audio/x-jazz";
        document.body.appendChild(obj);
        if (obj.isJazz) {
          _initJazzPlugin(obj);
          return;
        }
        this._break();
      }
      var _navigator;
      var _requestMIDIAccess;
      function _findMidiAccess() {
        if (typeof navigator !== "undefined" && navigator.requestMIDIAccess) {
          _navigator = navigator;
          _requestMIDIAccess = navigator.requestMIDIAccess;
          try {
            if (_requestMIDIAccess.toString().indexOf("JZZ(") != -1)
              _requestMIDIAccess = void 0;
          } catch (err) {
          }
        }
      }
      function _tryWebMIDI() {
        _findMidiAccess();
        if (_requestMIDIAccess) {
          var self = this;
          var onGood = function(midi) {
            _initWebMIDI(midi);
            self._resume();
          };
          var onBad = function(msg) {
            self._crash(msg);
          };
          var opt = {};
          _requestMIDIAccess.call(_navigator, opt).then(onGood, onBad);
          this._pause();
          return;
        }
        this._break();
      }
      function _tryWebMIDIsysex() {
        _findMidiAccess();
        if (_requestMIDIAccess) {
          var self = this;
          var onGood = function(midi) {
            _initWebMIDI(midi, true);
            self._resume();
          };
          var onBad = function(msg) {
            self._crash(msg);
          };
          var opt = { sysex: true };
          _requestMIDIAccess.call(_navigator, opt).then(onGood, onBad);
          this._pause();
          return;
        }
        this._break();
      }
      function _tryCRX() {
        var self = this;
        var inst;
        var msg;
        function eventHandle(evt) {
          inst = true;
          var a = evt.detail;
          if (!a) {
            if (!msg)
              msg = document.getElementById("jazz-midi-msg");
            if (!msg)
              return;
            try {
              a = JSON.parse(msg.innerText);
            } catch (err) {
            }
            msg.innerText = "";
          }
          document.removeEventListener("jazz-midi-msg", eventHandle);
          if (a[0] === "version") {
            _initCRX(msg, a[2]);
            self._resume();
          } else {
            self._crash();
          }
        }
        this._pause();
        try {
          document.addEventListener("jazz-midi-msg", eventHandle);
          document.dispatchEvent(new Event("jazz-midi"));
        } catch (err) {
        }
        setTimeout(function() {
          if (!inst)
            self._crash();
        }, 50);
      }
      function _zeroBreak() {
        this._pause();
        var self = this;
        _schedule(function() {
          self._crash();
        });
      }
      function _filterEngines(opt) {
        var ret = [];
        var arr = _filterEngineNames(opt);
        for (var i2 = 0; i2 < arr.length; i2++) {
          if (arr[i2] == "webmidi") {
            if (opt && opt.sysex === true)
              ret.push(_tryWebMIDIsysex);
            if (!opt || opt.sysex !== true || opt.degrade === true)
              ret.push(_tryWebMIDI);
          } else if (arr[i2] == "node") {
            ret.push(_tryNODE);
            ret.push(_zeroBreak);
          } else if (arr[i2] == "extension")
            ret.push(_tryCRX);
          else if (arr[i2] == "plugin")
            ret.push(_tryJazzPlugin);
        }
        ret.push(_initNONE);
        return ret;
      }
      function _filterEngineNames(opt) {
        var web = ["node", "extension", "plugin", "webmidi"];
        if (!opt || !opt.engine)
          return web;
        var arr = opt.engine instanceof Array ? opt.engine : [opt.engine];
        var dup = {};
        var none;
        var etc;
        var head = [];
        var tail = [];
        var i2;
        for (i2 = 0; i2 < arr.length; i2++) {
          var name = arr[i2].toString().toLowerCase();
          if (dup[name])
            continue;
          dup[name] = true;
          if (name === "none")
            none = true;
          if (name === "etc" || typeof name == "undefined")
            etc = true;
          if (etc)
            tail.push(name);
          else
            head.push(name);
          _pop(web, name);
        }
        if (etc || head.length || tail.length)
          none = false;
        return none ? [] : head.concat(etc ? web : tail);
      }
      function _initJZZ(opt) {
        _jzz = new _J();
        _jzz._options = opt;
        _jzz._push(_tryAny, [_filterEngines(opt)]);
        _jzz.refresh();
        _jzz._resume();
      }
      function _initNONE() {
        _engine._type = "none";
        _engine._version = _version;
        _engine._sysex = true;
        _engine._outs = [];
        _engine._ins = [];
        _engine._refresh = function() {
          _postRefresh();
        };
        _engine._watch = _nop;
        _engine._unwatch = _nop;
        _engine._close = _nop;
      }
      function _initEngineJP() {
        _engine._inArr = [];
        _engine._outArr = [];
        _engine._inMap = {};
        _engine._outMap = {};
        _engine._outsW = [];
        _engine._insW = [];
        _engine._version = _engine._main.version;
        _engine._sysex = true;
        var watcher;
        function _closeAll() {
          for (var i2 = 0; i2 < this.clients.length; i2++)
            this._close(this.clients[i2]);
        }
        _engine._refresh = function() {
          _engine._outs = [];
          _engine._ins = [];
          var i2, x;
          for (i2 = 0; (x = _engine._main.MidiOutInfo(i2)).length; i2++) {
            _engine._outs.push({ type: _engine._type, name: x[0], manufacturer: x[1], version: x[2] });
          }
          for (i2 = 0; (x = _engine._main.MidiInInfo(i2)).length; i2++) {
            _engine._ins.push({ type: _engine._type, name: x[0], manufacturer: x[1], version: x[2] });
          }
          _postRefresh();
        };
        _engine._openOut = function(port, name) {
          var impl = _engine._outMap[name];
          if (!impl) {
            if (_engine._pool.length <= _engine._outArr.length)
              _engine._pool.push(_engine._newPlugin());
            impl = {
              name,
              clients: [],
              info: {
                name,
                manufacturer: _engine._allOuts[name].manufacturer,
                version: _engine._allOuts[name].version,
                type: "MIDI-out",
                sysex: _engine._sysex,
                engine: _engine._type
              },
              _close: function(port2) {
                _engine._closeOut(port2);
              },
              _closeAll,
              _receive: function(a) {
                if (a.length)
                  this.plugin.MidiOutRaw(a.slice());
              }
            };
            var plugin = _engine._pool[_engine._outArr.length];
            impl.plugin = plugin;
            _engine._outArr.push(impl);
            _engine._outMap[name] = impl;
          }
          if (!impl.open) {
            var s = impl.plugin.MidiOutOpen(name);
            if (s !== name) {
              if (s)
                impl.plugin.MidiOutClose();
              port._break();
              return;
            }
            impl.open = true;
          }
          port._orig._impl = impl;
          _push(impl.clients, port._orig);
          port._info = impl.info;
          port._receive = function(arg) {
            impl._receive(arg);
          };
          port._close = function() {
            impl._close(this);
          };
        };
        _engine._openIn = function(port, name) {
          var impl = _engine._inMap[name];
          if (!impl) {
            if (_engine._pool.length <= _engine._inArr.length)
              _engine._pool.push(_engine._newPlugin());
            impl = {
              name,
              clients: [],
              info: {
                name,
                manufacturer: _engine._allIns[name].manufacturer,
                version: _engine._allIns[name].version,
                type: "MIDI-in",
                sysex: _engine._sysex,
                engine: _engine._type
              },
              _close: function(port2) {
                _engine._closeIn(port2);
              },
              _closeAll,
              handle: function(t, a) {
                for (var i2 = 0; i2 < this.clients.length; i2++) {
                  var msg = MIDI(a);
                  this.clients[i2]._emit(msg);
                }
              }
            };
            var makeHandle = function(x) {
              return function(t, a) {
                x.handle(t, a);
              };
            };
            impl.onmidi = makeHandle(impl);
            var plugin = _engine._pool[_engine._inArr.length];
            impl.plugin = plugin;
            _engine._inArr.push(impl);
            _engine._inMap[name] = impl;
          }
          if (!impl.open) {
            var s = impl.plugin.MidiInOpen(name, impl.onmidi);
            if (s !== name) {
              if (s)
                impl.plugin.MidiInClose();
              port._break();
              return;
            }
            impl.open = true;
          }
          port._orig._impl = impl;
          _push(impl.clients, port._orig);
          port._info = impl.info;
          port._close = function() {
            impl._close(this);
          };
        };
        _engine._closeOut = function(port) {
          var impl = port._impl;
          _pop(impl.clients, port._orig);
          if (!impl.clients.length && impl.open) {
            impl.open = false;
            impl.plugin.MidiOutClose();
          }
        };
        _engine._closeIn = function(port) {
          var impl = port._impl;
          _pop(impl.clients, port._orig);
          if (!impl.clients.length && impl.open) {
            impl.open = false;
            impl.plugin.MidiInClose();
          }
        };
        _engine._close = function() {
          for (var i2 = 0; i2 < _engine._inArr.length; i2++)
            if (_engine._inArr[i2].open)
              _engine._inArr[i2].plugin.MidiInClose();
          _engine._unwatch();
        };
        _engine._watch = function() {
          if (!watcher)
            watcher = setInterval(function() {
              _engine._refresh();
            }, 250);
        };
        _engine._unwatch = function() {
          if (watcher)
            clearInterval(watcher);
          watcher = void 0;
        };
      }
      function _initNode(obj) {
        _engine._type = "node";
        _engine._main = obj;
        _engine._pool = [];
        _engine._newPlugin = function() {
          return new obj.MIDI();
        };
        _initEngineJP();
      }
      function _initJazzPlugin(obj) {
        _engine._type = "plugin";
        _engine._main = obj;
        _engine._pool = [obj];
        _engine._newPlugin = function() {
          var plg = document.createElement("object");
          plg.style.visibility = "hidden";
          plg.style.width = "0px";
          obj.style.height = "0px";
          plg.classid = "CLSID:1ACE1618-1C7D-4561-AEE1-34842AA85E90";
          plg.type = "audio/x-jazz";
          document.body.appendChild(plg);
          return plg.isJazz ? plg : void 0;
        };
        _initEngineJP();
      }
      function _initWebMIDI(access, sysex) {
        _engine._type = "webmidi";
        _engine._version = 43;
        _engine._sysex = !!sysex;
        _engine._access = access;
        _engine._inMap = {};
        _engine._outMap = {};
        _engine._outsW = [];
        _engine._insW = [];
        var watcher;
        function _closeAll() {
          for (var i2 = 0; i2 < this.clients.length; i2++)
            this._close(this.clients[i2]);
        }
        _engine._refresh = function() {
          _engine._outs = [];
          _engine._ins = [];
          _engine._access.outputs.forEach(function(port) {
            _engine._outs.push({ type: _engine._type, name: port.name, manufacturer: port.manufacturer, version: port.version });
          });
          _engine._access.inputs.forEach(function(port) {
            _engine._ins.push({ type: _engine._type, name: port.name, manufacturer: port.manufacturer, version: port.version });
          });
          _postRefresh();
        };
        _engine._openOut = function(port, name) {
          var impl = _engine._outMap[name];
          if (!impl) {
            impl = {
              name,
              clients: [],
              info: {
                name,
                manufacturer: _engine._allOuts[name].manufacturer,
                version: _engine._allOuts[name].version,
                type: "MIDI-out",
                sysex: _engine._sysex,
                engine: _engine._type
              },
              _close: function(port2) {
                _engine._closeOut(port2);
              },
              _closeAll,
              _receive: function(a) {
                if (impl.dev && a.length)
                  this.dev.send(a.slice());
              }
            };
          }
          var found;
          _engine._access.outputs.forEach(function(dev) {
            if (dev.name === name)
              found = dev;
          });
          if (found) {
            impl.dev = found;
            _engine._outMap[name] = impl;
            port._orig._impl = impl;
            _push(impl.clients, port._orig);
            port._info = impl.info;
            port._receive = function(arg) {
              impl._receive(arg);
            };
            port._close = function() {
              impl._close(this);
            };
            if (impl.dev.open) {
              port._pause();
              impl.dev.open().then(function() {
                port._resume();
              }, function() {
                port._crash();
              });
            }
          } else
            port._break();
        };
        _engine._openIn = function(port, name) {
          var impl = _engine._inMap[name];
          if (!impl) {
            impl = {
              name,
              clients: [],
              info: {
                name,
                manufacturer: _engine._allIns[name].manufacturer,
                version: _engine._allIns[name].version,
                type: "MIDI-in",
                sysex: _engine._sysex,
                engine: _engine._type
              },
              _close: function(port2) {
                _engine._closeIn(port2);
              },
              _closeAll,
              handle: function(evt) {
                for (var i2 = 0; i2 < this.clients.length; i2++) {
                  var msg = MIDI([].slice.call(evt.data));
                  this.clients[i2]._emit(msg);
                }
              }
            };
          }
          var found;
          _engine._access.inputs.forEach(function(dev) {
            if (dev.name === name)
              found = dev;
          });
          if (found) {
            impl.dev = found;
            var makeHandle = function(x) {
              return function(evt) {
                x.handle(evt);
              };
            };
            impl.dev.onmidimessage = makeHandle(impl);
            _engine._inMap[name] = impl;
            port._orig._impl = impl;
            _push(impl.clients, port._orig);
            port._info = impl.info;
            port._close = function() {
              impl._close(this);
            };
            if (impl.dev.open) {
              port._pause();
              impl.dev.open().then(function() {
                port._resume();
              }, function() {
                port._crash();
              });
            }
          } else
            port._break();
        };
        _engine._closeOut = function(port) {
          var impl = port._impl;
          _pop(impl.clients, port._orig);
          if (!impl.clients.length) {
            if (impl.dev && impl.dev.close)
              impl.dev.close();
            impl.dev = void 0;
          }
        };
        _engine._closeIn = function(port) {
          var impl = port._impl;
          _pop(impl.clients, port._orig);
          if (!impl.clients.length) {
            if (impl.dev) {
              impl.dev.onmidimessage = null;
              if (impl.dev.close)
                impl.dev.close();
            }
            impl.dev = void 0;
          }
        };
        _engine._close = function() {
          _engine._unwatch();
        };
        _engine._watch = function() {
          _engine._access.onstatechange = function() {
            watcher = true;
            _schedule(function() {
              if (watcher) {
                _engine._refresh();
                watcher = false;
              }
            });
          };
        };
        _engine._unwatch = function() {
          _engine._access.onstatechange = void 0;
        };
      }
      function _initCRX(msg, ver) {
        _engine._type = "extension";
        _engine._version = ver;
        _engine._sysex = true;
        _engine._pool = [];
        _engine._outs = [];
        _engine._ins = [];
        _engine._inArr = [];
        _engine._outArr = [];
        _engine._inMap = {};
        _engine._outMap = {};
        _engine._outsW = [];
        _engine._insW = [];
        _engine.refreshClients = [];
        _engine._msg = msg;
        _engine._newPlugin = function() {
          var plugin = { id: _engine._pool.length };
          _engine._pool.push(plugin);
          if (!plugin.id)
            plugin.ready = true;
          else
            document.dispatchEvent(new CustomEvent("jazz-midi", { detail: ["new"] }));
        };
        _engine._newPlugin();
        _engine._refresh = function(client) {
          _engine.refreshClients.push(client);
          client._pause();
          _schedule(function() {
            document.dispatchEvent(new CustomEvent("jazz-midi", { detail: ["refresh"] }));
          });
        };
        function _closeAll() {
          for (var i2 = 0; i2 < this.clients.length; i2++)
            this._close(this.clients[i2]);
        }
        _engine._openOut = function(port, name) {
          var impl = _engine._outMap[name];
          if (!impl) {
            if (_engine._pool.length <= _engine._outArr.length)
              _engine._newPlugin();
            var plugin = _engine._pool[_engine._outArr.length];
            impl = {
              name,
              clients: [],
              info: {
                name,
                manufacturer: _engine._allOuts[name].manufacturer,
                version: _engine._allOuts[name].version,
                type: "MIDI-out",
                sysex: _engine._sysex,
                engine: _engine._type
              },
              _start: function() {
                document.dispatchEvent(new CustomEvent("jazz-midi", { detail: ["openout", plugin.id, name] }));
              },
              _close: function(port2) {
                _engine._closeOut(port2);
              },
              _closeAll,
              _receive: function(a) {
                if (a.length) {
                  var v = a.slice();
                  v.splice(0, 0, "play", plugin.id);
                  document.dispatchEvent(new CustomEvent("jazz-midi", { detail: v }));
                }
              }
            };
            impl.plugin = plugin;
            plugin.output = impl;
            _engine._outArr.push(impl);
            _engine._outMap[name] = impl;
          }
          port._orig._impl = impl;
          _push(impl.clients, port._orig);
          port._info = impl.info;
          port._receive = function(arg) {
            impl._receive(arg);
          };
          port._close = function() {
            impl._close(this);
          };
          if (!impl.open) {
            port._pause();
            if (impl.plugin.ready)
              impl._start();
          }
        };
        _engine._openIn = function(port, name) {
          var impl = _engine._inMap[name];
          if (!impl) {
            if (_engine._pool.length <= _engine._inArr.length)
              _engine._newPlugin();
            var plugin = _engine._pool[_engine._inArr.length];
            impl = {
              name,
              clients: [],
              info: {
                name,
                manufacturer: _engine._allIns[name].manufacturer,
                version: _engine._allIns[name].version,
                type: "MIDI-in",
                sysex: _engine._sysex,
                engine: _engine._type
              },
              _start: function() {
                document.dispatchEvent(new CustomEvent("jazz-midi", { detail: ["openin", plugin.id, name] }));
              },
              _close: function(port2) {
                _engine._closeIn(port2);
              },
              _closeAll
            };
            impl.plugin = plugin;
            plugin.input = impl;
            _engine._inArr.push(impl);
            _engine._inMap[name] = impl;
          }
          port._orig._impl = impl;
          _push(impl.clients, port._orig);
          port._info = impl.info;
          port._close = function() {
            impl._close(this);
          };
          if (!impl.open) {
            port._pause();
            if (impl.plugin.ready)
              impl._start();
          }
        };
        _engine._closeOut = function(port) {
          var impl = port._impl;
          _pop(impl.clients, port._orig);
          if (!impl.clients.length && impl.open) {
            impl.open = false;
            document.dispatchEvent(new CustomEvent("jazz-midi", { detail: ["closeout", impl.plugin.id] }));
          }
        };
        _engine._closeIn = function(port) {
          var impl = port._impl;
          _pop(impl.clients, port._orig);
          if (!impl.clients.length && impl.open) {
            impl.open = false;
            document.dispatchEvent(new CustomEvent("jazz-midi", { detail: ["closein", impl.plugin.id] }));
          }
        };
        _engine._close = function() {
          _engine._unwatch();
        };
        var watcher;
        _engine._watch = function() {
          _engine._insW = _engine._ins;
          _engine._outsW = _engine._outs;
          watcher = setInterval(function() {
            document.dispatchEvent(new CustomEvent("jazz-midi", { detail: ["refresh"] }));
          }, 250);
        };
        _engine._unwatch = function() {
          clearInterval(watcher);
          watcher = void 0;
        };
        document.addEventListener("jazz-midi-msg", function(evt) {
          var i2, j2, impl;
          var v = evt.detail ? [evt.detail] : void 0;
          if (!v) {
            v = _engine._msg.innerText.split("\n");
            _engine._msg.innerText = "";
            for (i2 = 0; i2 < v.length; i2++)
              try {
                v[i2] = JSON.parse(v[i2]);
              } catch (err) {
                v[i2] = [];
              }
          }
          for (i2 = 0; i2 < v.length; i2++) {
            var a = v[i2];
            if (!a.length)
              continue;
            if (a[0] === "refresh") {
              if (a[1].ins) {
                for (j2 = 0; j2 < a[1].ins.length; j2++)
                  a[1].ins[j2].type = _engine._type;
                _engine._ins = a[1].ins;
              }
              if (a[1].outs) {
                for (j2 = 0; j2 < a[1].outs.length; j2++)
                  a[1].outs[j2].type = _engine._type;
                _engine._outs = a[1].outs;
              }
              _postRefresh();
              for (j2 = 0; j2 < _engine.refreshClients.length; j2++)
                _engine.refreshClients[j2]._resume();
              _engine.refreshClients = [];
            } else if (a[0] === "version") {
              var plugin = _engine._pool[a[1]];
              if (plugin) {
                plugin.ready = true;
                if (plugin.input)
                  plugin.input._start();
                if (plugin.output)
                  plugin.output._start();
              }
            } else if (a[0] === "openout") {
              impl = _engine._pool[a[1]].output;
              if (impl) {
                if (a[2] == impl.name) {
                  impl.open = true;
                  if (impl.clients)
                    for (j2 = 0; j2 < impl.clients.length; j2++)
                      impl.clients[j2]._resume();
                } else if (impl.clients)
                  for (j2 = 0; j2 < impl.clients.length; j2++)
                    impl.clients[j2]._crash();
              }
            } else if (a[0] === "openin") {
              impl = _engine._pool[a[1]].input;
              if (impl) {
                if (a[2] == impl.name) {
                  impl.open = true;
                  if (impl.clients)
                    for (j2 = 0; j2 < impl.clients.length; j2++)
                      impl.clients[j2]._resume();
                } else if (impl.clients)
                  for (j2 = 0; j2 < impl.clients.length; j2++)
                    impl.clients[j2]._crash();
              }
            } else if (a[0] === "midi") {
              impl = _engine._pool[a[1]].input;
              if (impl && impl.clients) {
                for (j2 = 0; j2 < impl.clients.length; j2++) {
                  var msg2 = MIDI(a.slice(3));
                  impl.clients[j2]._emit(msg2);
                }
              }
            }
          }
        });
      }
      var JZZ = function(opt) {
        if (!_jzz)
          _initJZZ(opt);
        return _jzz._thenable();
      };
      JZZ.JZZ = JZZ;
      JZZ.version = _version;
      JZZ.info = function() {
        return _J.prototype.info();
      };
      function Widget(arg) {
        var self = new _M();
        if (arg instanceof Object)
          _for(arg, function(k2) {
            self[k2] = arg[k2];
          });
        self._resume();
        return self;
      }
      JZZ.Widget = Widget;
      _J.prototype.Widget = JZZ.Widget;
      JZZ.addMidiIn = function(name, widget) {
        var info = _clone(widget._info || {});
        info.name = name;
        info.type = info.type || "javascript";
        info.manufacturer = info.manufacturer || "virtual";
        info.version = info.version || "0.0";
        var engine = {
          _info: function() {
            return info;
          },
          _openIn: function(port) {
            port._pause();
            port._info = _clone(info);
            port._close = function() {
              widget.disconnect(port);
            };
            widget.connect(port);
            port._resume();
          }
        };
        return JZZ.lib.registerMidiIn(name, engine);
      };
      _J.prototype.addMidiIn = JZZ.addMidiIn;
      JZZ.addMidiOut = function(name, widget) {
        var info = _clone(widget._info || {});
        info.name = name;
        info.type = info.type || "javascript";
        info.manufacturer = info.manufacturer || "virtual";
        info.version = info.version || "0.0";
        var engine = {
          _info: function() {
            return info;
          },
          _openOut: function(port) {
            port._pause();
            port._info = _clone(info);
            port._close = function() {
              port.disconnect();
            };
            _connect.apply(port, [widget]);
            port._resume();
          }
        };
        return JZZ.lib.registerMidiOut(name, engine);
      };
      _J.prototype.addMidiOut = JZZ.addMidiOut;
      JZZ.maskMidiIn = function(name) {
        _insM[name] = true;
      };
      _J.prototype.maskMidiIn = JZZ.maskMidiIn;
      JZZ.unmaskMidiIn = function(name) {
        delete _insM[name];
      };
      _J.prototype.unmaskMidiIn = JZZ.unmaskMidiIn;
      JZZ.maskMidiOut = function(name) {
        _outsM[name] = true;
      };
      _J.prototype.maskMidiOut = JZZ.maskMidiOut;
      JZZ.unmaskMidiOut = function(name) {
        delete _outsM[name];
      };
      _J.prototype.unmaskMidiOut = JZZ.unmaskMidiOut;
      function SMPTE() {
        var self = this instanceof SMPTE ? this : self = new SMPTE();
        SMPTE.prototype.reset.apply(self, arguments);
        return self;
      }
      SMPTE.prototype.reset = function(arg) {
        if (arg instanceof SMPTE) {
          this.setType(arg.getType());
          this.setHour(arg.getHour());
          this.setMinute(arg.getMinute());
          this.setSecond(arg.getSecond());
          this.setFrame(arg.getFrame());
          this.setQuarter(arg.getQuarter());
          return this;
        }
        var arr = arg instanceof Array ? arg : arguments;
        this.setType(arr[0]);
        this.setHour(arr[1]);
        this.setMinute(arr[2]);
        this.setSecond(arr[3]);
        this.setFrame(arr[4]);
        this.setQuarter(arr[5]);
        return this;
      };
      function _fixDropFrame() {
        if (this.type == 29.97 && !this.second && this.frame < 2 && this.minute % 10)
          this.frame = 2;
      }
      SMPTE.prototype.isFullFrame = function() {
        return this.quarter == 0 || this.quarter == 4;
      };
      SMPTE.prototype.getType = function() {
        return this.type;
      };
      SMPTE.prototype.getHour = function() {
        return this.hour;
      };
      SMPTE.prototype.getMinute = function() {
        return this.minute;
      };
      SMPTE.prototype.getSecond = function() {
        return this.second;
      };
      SMPTE.prototype.getFrame = function() {
        return this.frame;
      };
      SMPTE.prototype.getQuarter = function() {
        return this.quarter;
      };
      SMPTE.prototype.setType = function(x) {
        if (typeof x == "undefined" || x == 24)
          this.type = 24;
        else if (x == 25)
          this.type = 25;
        else if (x == 29.97) {
          this.type = 29.97;
          _fixDropFrame.apply(this);
        } else if (x == 30)
          this.type = 30;
        else
          throw RangeError("Bad SMPTE frame rate: " + x);
        if (this.frame >= this.type)
          this.frame = this.type - 1;
        return this;
      };
      SMPTE.prototype.setHour = function(x) {
        if (typeof x == "undefined")
          x = 0;
        if (x != parseInt(x) || x < 0 || x >= 24)
          throw RangeError("Bad SMPTE hours value: " + x);
        this.hour = x;
        return this;
      };
      SMPTE.prototype.setMinute = function(x) {
        if (typeof x == "undefined")
          x = 0;
        if (x != parseInt(x) || x < 0 || x >= 60)
          throw RangeError("Bad SMPTE minutes value: " + x);
        this.minute = x;
        _fixDropFrame.apply(this);
        return this;
      };
      SMPTE.prototype.setSecond = function(x) {
        if (typeof x == "undefined")
          x = 0;
        if (x != parseInt(x) || x < 0 || x >= 60)
          throw RangeError("Bad SMPTE seconds value: " + x);
        this.second = x;
        _fixDropFrame.apply(this);
        return this;
      };
      SMPTE.prototype.setFrame = function(x) {
        if (typeof x == "undefined")
          x = 0;
        if (x != parseInt(x) || x < 0 || x >= this.type)
          throw RangeError("Bad SMPTE frame number: " + x);
        this.frame = x;
        _fixDropFrame.apply(this);
        return this;
      };
      SMPTE.prototype.setQuarter = function(x) {
        if (typeof x == "undefined")
          x = 0;
        if (x != parseInt(x) || x < 0 || x >= 8)
          throw RangeError("Bad SMPTE quarter frame: " + x);
        this.quarter = x;
        return this;
      };
      SMPTE.prototype.incrFrame = function() {
        this.frame++;
        if (this.frame >= this.type) {
          this.frame = 0;
          this.second++;
          if (this.second >= 60) {
            this.second = 0;
            this.minute++;
            if (this.minute >= 60) {
              this.minute = 0;
              this.hour = this.hour >= 23 ? 0 : this.hour + 1;
            }
          }
        }
        _fixDropFrame.apply(this);
        return this;
      };
      SMPTE.prototype.decrFrame = function() {
        if (!this.second && this.frame == 2 && this.type == 29.97 && this.minute % 10)
          this.frame = 0;
        this.frame--;
        if (this.frame < 0) {
          this.frame = this.type == 29.97 ? 29 : this.type - 1;
          this.second--;
          if (this.second < 0) {
            this.second = 59;
            this.minute--;
            if (this.minute < 0) {
              this.minute = 59;
              this.hour = this.hour ? this.hour - 1 : 23;
            }
          }
        }
        return this;
      };
      SMPTE.prototype.incrQF = function() {
        this.backwards = false;
        this.quarter = this.quarter + 1 & 7;
        if (this.quarter == 0 || this.quarter == 4)
          this.incrFrame();
        return this;
      };
      SMPTE.prototype.decrQF = function() {
        this.backwards = true;
        this.quarter = this.quarter + 7 & 7;
        if (this.quarter == 3 || this.quarter == 7)
          this.decrFrame();
        return this;
      };
      function _825(a) {
        return [[24, 25, 29.97, 30][a[7] >> 1 & 3], (a[7] & 1) << 4 | a[6], a[5] << 4 | a[4], a[3] << 4 | a[2], a[1] << 4 | a[0]];
      }
      SMPTE.prototype.read = function(m2) {
        if (!(m2 instanceof MIDI))
          m2 = MIDI.apply(null, arguments);
        if (m2[0] == 240 && m2[1] == 127 && m2[3] == 1 && m2[4] == 1 && m2[9] == 247) {
          this.type = [24, 25, 29.97, 30][m2[5] >> 5 & 3];
          this.hour = m2[5] & 31;
          this.minute = m2[6];
          this.second = m2[7];
          this.frame = m2[8];
          this.quarter = 0;
          this._ = void 0;
          this._b = void 0;
          this._f = void 0;
          return true;
        }
        if (m2[0] == 241 && typeof m2[1] != "undefined") {
          var q = m2[1] >> 4;
          var n2 = m2[1] & 15;
          if (q == 0) {
            if (this._ == 7) {
              if (this._f == 7) {
                this.reset(_825(this._a));
                this.incrFrame();
              }
              this.incrFrame();
            }
          } else if (q == 3) {
            if (this._ == 4) {
              this.decrFrame();
            }
          } else if (q == 4) {
            if (this._ == 3) {
              this.incrFrame();
            }
          } else if (q == 7) {
            if (this._ === 0) {
              if (this._b === 0) {
                this.reset(_825(this._a));
                this.decrFrame();
              }
              this.decrFrame();
            }
          }
          if (!this._a)
            this._a = [];
          this._a[q] = n2;
          this._f = this._f === q - 1 || q == 0 ? q : void 0;
          this._b = this._b === q + 1 || q == 7 ? q : void 0;
          this._ = q;
          this.quarter = q;
          return true;
        }
        return false;
      };
      function _mtc(t) {
        if (!t.backwards && t.quarter >= 4)
          t.decrFrame();
        else if (t.backwards && t.quarter < 4)
          t.incrFrame();
        var ret;
        switch (t.quarter >> 1) {
          case 0:
            ret = t.frame;
            break;
          case 1:
            ret = t.second;
            break;
          case 2:
            ret = t.minute;
            break;
          default:
            ret = t.hour;
        }
        if (t.quarter & 1)
          ret >>= 4;
        else
          ret &= 15;
        if (t.quarter == 7) {
          if (t.type == 25)
            ret |= 2;
          else if (t.type == 29.97)
            ret |= 4;
          else if (t.type == 30)
            ret |= 6;
        }
        if (!t.backwards && t.quarter >= 4)
          t.incrFrame();
        else if (t.backwards && t.quarter < 4)
          t.decrFrame();
        return ret | t.quarter << 4;
      }
      function _hrtype(t) {
        if (t.type == 25)
          return t.hour | 32;
        if (t.type == 29.97)
          return t.hour | 64;
        if (t.type == 30)
          return t.hour | 96;
        return t.hour;
      }
      function _dec(x) {
        return x < 10 ? "0" + x : x;
      }
      function _smptetxt(x) {
        var arr = [];
        for (var i2 = 0; i2 < x.length; i2++)
          arr[i2] = _dec(i2 ? x[i2] : x[i2] & 31);
        return arr.join(":");
      }
      SMPTE.prototype.toString = function() {
        return _smptetxt([this.hour, this.minute, this.second, this.frame]);
      };
      JZZ.SMPTE = SMPTE;
      _J.prototype.SMPTE = SMPTE;
      function MIDI(arg) {
        var self = this instanceof MIDI ? this : self = new MIDI();
        var i2;
        if (arg instanceof MIDI) {
          self._from = arg._from.slice();
          _for(arg, function(i3) {
            if (i3 != "_from")
              self[i3] = arg[i3];
          });
          return self;
        } else
          self._from = [];
        if (typeof arg == "undefined")
          return self;
        var arr = arg instanceof Array ? arg : arguments;
        for (i2 = 0; i2 < arr.length; i2++) {
          n = arr[i2];
          if (i2 == 1) {
            if (self[0] >= 128 && self[0] <= 175)
              n = MIDI.noteValue(n);
            if (self[0] >= 192 && self[0] <= 207)
              n = MIDI.programValue(n);
          }
          if (n != parseInt(n) || n < 0 || n > 255)
            _throw(arr[i2]);
          self.push(n);
        }
        return self;
      }
      MIDI.prototype = [];
      MIDI.prototype.constructor = MIDI;
      var _noteNum = {};
      MIDI.noteValue = function(x) {
        return typeof x == "undefined" ? void 0 : _noteNum[x.toString().toLowerCase()];
      };
      MIDI.programValue = function(x) {
        return x;
      };
      MIDI.octaveValue = function(x) {
        var n2 = _noteNum[x.toString().toLowerCase()];
        if (typeof n2 == "undefined")
          n2 = _noteNum[x.toString().toLowerCase() + "1"];
        return typeof n2 == "undefined" ? void 0 : n2 % 12;
      };
      MIDI.freq = function(n2, a) {
        if (typeof a == "undefined")
          a = 440;
        _float(a);
        if (n2 != parseFloat(n2))
          n2 = _7bn(n2);
        return a * Math.pow(2, (n2 - 69) / 12);
      };
      function _float(x) {
        if (x != parseFloat(x))
          throw TypeError("Not a number: " + x);
      }
      MIDI.shift = function(f, f0) {
        if (typeof f0 == "undefined")
          f0 = 440;
        _float(f);
        _float(f0);
        return Math.log2(f / f0) * 12;
      };
      MIDI.midi = function(f, f0) {
        if (f != parseFloat(f))
          return _7bn(f);
        return MIDI.shift(f, f0) + 69;
      };
      MIDI.to7b = function(x) {
        _float(x);
        return x <= 0 ? 0 : x >= 1 ? 127 : Math.floor(x * 128);
      };
      MIDI.to14b = function(x) {
        _float(x);
        return x <= 0 ? 0 : x >= 1 ? 16383 : Math.floor(x * 16384);
      };
      MIDI.to21b = function(x) {
        if (typeof x == "undefined")
          return 2097151;
        _float(x);
        if (x <= 0)
          return 0;
        x = (Math.floor(x) << 14) + MIDI.to14b(x - Math.floor(x));
        return x < 2097151 ? x : 2097150;
      };
      function _MIDI() {
      }
      _MIDI.prototype = MIDI;
      MIDI._sxid = 127;
      MIDI.sxId = function(id) {
        if (typeof id == "undefined")
          id = MIDI._sxid;
        if (id == this._sxid)
          return this;
        id = _7b(id);
        var ret = new _MIDI();
        ret._ch = this._ch;
        ret._sxid = id;
        return ret;
      };
      MIDI.ch = function(c) {
        if (c == this._ch || typeof c == "undefined" && typeof this._ch == "undefined")
          return this;
        var ret = new _MIDI();
        if (typeof c != "undefined")
          c = _ch(c);
        ret._ch = c;
        ret._sxid = this._sxid;
        return ret;
      };
      var _noteMap = { c: 0, d: 2, e: 4, f: 5, g: 7, a: 9, b: 11, h: 11 };
      _for(_noteMap, function(k2) {
        for (n = 0; n < 12; n++) {
          m = _noteMap[k2] + n * 12;
          if (m > 127)
            break;
          _noteNum[k2 + n] = m;
          _noteNum[k2 + "♮" + n] = m;
          if (m > 0) {
            _noteNum[k2 + "b" + n] = m - 1;
            _noteNum[k2 + "♭" + n] = m - 1;
            _noteNum[k2 + "bb" + n] = m - 2;
            _noteNum[k2 + "♭♭" + n] = m - 2;
            _noteNum[k2 + "𝄫" + n] = m - 2;
          }
          if (m < 127) {
            _noteNum[k2 + "#" + n] = m + 1;
            _noteNum[k2 + "♯" + n] = m + 1;
            _noteNum[k2 + "##" + n] = m + 2;
            _noteNum[k2 + "♯♯" + n] = m + 2;
            _noteNum[k2 + "𝄪" + n] = m + 2;
          }
        }
      });
      for (n = 0; n < 128; n++)
        _noteNum[n] = n;
      function _throw(x) {
        throw RangeError("Bad MIDI value: " + x);
      }
      function _bad(x) {
        throw TypeError("Invalid value: " + x);
      }
      function _oor(x) {
        throw RangeError("Out of range: " + x);
      }
      function _ch(c) {
        _validateChannel(c);
        return parseInt(c);
      }
      function _7b(n2, m2) {
        if (n2 != parseInt(n2) || n2 < 0 || n2 > 127)
          _throw(typeof m2 == "undefined" ? n2 : m2);
        return parseInt(n2);
      }
      function _8b(n2) {
        if (n2 != parseInt(n2) || n2 < 0 || n2 > 255)
          _throw(n2);
        return parseInt(n2);
      }
      function _14b(n2) {
        if (n2 != parseInt(n2) || n2 < 0 || n2 > 16383)
          _throw(n2);
        return parseInt(n2);
      }
      function _16b(n2) {
        if (n2 != parseInt(n2) || n2 < 0 || n2 > 65535)
          throw RangeError("Expected a 16-bit value: " + n2);
        return parseInt(n2);
      }
      function _21b(n2) {
        if (n2 != parseInt(n2) || n2 < 0 || n2 > 2097151)
          _throw(n2);
        return parseInt(n2);
      }
      function _7bn(n2) {
        return _7b(MIDI.noteValue(n2), n2);
      }
      function _lsb(n2) {
        return _14b(n2) & 127;
      }
      function _msb(n2) {
        return _14b(n2) >> 7;
      }
      function _8bs(s) {
        s = "" + s;
        for (var i2 = 0; i2 < s.length; i2++)
          if (s.charCodeAt(i2) > 255)
            _throw(s[i2]);
        return s;
      }
      function _to777(n2) {
        return [n2 >> 14, n2 >> 7 & 127, n2 & 127];
      }
      function _01(x, y) {
        if (x != parseFloat(x))
          _bad(typeof y == "undefined" ? x : y);
        if (x < 0 || x > 1)
          _oor(typeof y == "undefined" ? x : y);
        return parseFloat(x);
      }
      function _rt(b) {
        return typeof b != "undefined" && !b ? 126 : 127;
      }
      function _ntu(x) {
        var k2, m2;
        var kkk = [];
        var vvv = {};
        _for(x, function(k3) {
          m2 = _21b(x[k3]);
          k3 = _7bn(k3);
          if (k3 in vvv)
            throw RangeError("Duplicate MIDI value: " + k3);
          kkk.push(k3);
          vvv[k3] = m2;
        });
        kkk.sort();
        var out = [kkk.length];
        for (k2 = 0; k2 < kkk.length; k2++)
          out = out.concat([kkk[k2]], _to777(vvv[kkk[k2]]));
        return out;
      }
      function _f2ntu(x) {
        var out = {};
        _for(x, function(k2) {
          out[k2] = MIDI.to21b(x[k2] == parseFloat(x[k2]) ? x[k2] : _7bn(x[k2]));
        });
        return out;
      }
      function _hz2ntu(x) {
        var out = {};
        _for(x, function(k2) {
          out[k2] = MIDI.to21b(MIDI.midi(x[k2]));
        });
        return out;
      }
      function _12x7(a) {
        var out = [];
        if (!(a instanceof Array) || a.length != 12)
          throw TypeError("Expected an array of size 12");
        for (var i2 = 0; i2 < 12; i2++)
          out.push(_7b(a[i2]));
        return out;
      }
      function _12x14(a) {
        var out = [];
        if (!(a instanceof Array) || a.length != 12)
          throw TypeError("Expected an array of size 12");
        for (var i2 = 0; i2 < 12; i2++) {
          out.push(_msb(a[i2]));
          out.push(_lsb(a[i2]));
        }
        return out;
      }
      var _helperMPE = {
        noteOff: function(c, n2, v) {
          if (typeof v == "undefined")
            v = 64;
          return [128 + _ch(c), _7bn(n2), _7b(v)];
        },
        noteOn: function(c, n2, v) {
          if (typeof v == "undefined")
            v = 127;
          return [144 + _ch(c), _7bn(n2), _7b(v)];
        },
        aftertouch: function(c, n2, v) {
          return [160 + _ch(c), _7bn(n2), _7b(v)];
        }
      };
      var _helperCH = {
        control: function(c, n2, v) {
          return [176 + _ch(c), _7b(n2), _7b(v)];
        },
        program: function(c, n2) {
          return [192 + _ch(c), _7b(MIDI.programValue(n2), n2)];
        },
        pressure: function(c, n2) {
          return [208 + _ch(c), _7b(n2)];
        },
        pitchBend: function(c, n2, l) {
          return typeof l == "undefined" ? [224 + _ch(c), _lsb(n2), _msb(n2)] : [224 + _ch(c), _7b(l), _7b(n2)];
        },
        pitchBendF: function(c, x) {
          return _helperCH.pitchBend(c, MIDI.to14b((x + 1) / 2));
        },
        bankMSB: function(c, n2) {
          return [176 + _ch(c), 0, _7b(n2)];
        },
        bankLSB: function(c, n2) {
          return [176 + _ch(c), 32, _7b(n2)];
        },
        modMSB: function(c, n2) {
          return [176 + _ch(c), 1, _7b(n2)];
        },
        modLSB: function(c, n2) {
          return [176 + _ch(c), 33, _7b(n2)];
        },
        breathMSB: function(c, n2) {
          return [176 + _ch(c), 2, _7b(n2)];
        },
        breathLSB: function(c, n2) {
          return [176 + _ch(c), 34, _7b(n2)];
        },
        footMSB: function(c, n2) {
          return [176 + _ch(c), 4, _7b(n2)];
        },
        footLSB: function(c, n2) {
          return [176 + _ch(c), 36, _7b(n2)];
        },
        portamentoMSB: function(c, n2) {
          return [176 + _ch(c), 5, _7b(n2)];
        },
        portamentoLSB: function(c, n2) {
          return [176 + _ch(c), 37, _7b(n2)];
        },
        dataMSB: function(c, n2) {
          return [176 + _ch(c), 6, _7b(n2)];
        },
        dataLSB: function(c, n2) {
          return [176 + _ch(c), 38, _7b(n2)];
        },
        volumeMSB: function(c, n2) {
          return [176 + _ch(c), 7, _7b(n2)];
        },
        volumeLSB: function(c, n2) {
          return [176 + _ch(c), 39, _7b(n2)];
        },
        balanceMSB: function(c, n2) {
          return [176 + _ch(c), 8, _7b(n2)];
        },
        balanceLSB: function(c, n2) {
          return [176 + _ch(c), 40, _7b(n2)];
        },
        panMSB: function(c, n2) {
          return [176 + _ch(c), 10, _7b(n2)];
        },
        panLSB: function(c, n2) {
          return [176 + _ch(c), 42, _7b(n2)];
        },
        expressionMSB: function(c, n2) {
          return [176 + _ch(c), 11, _7b(n2)];
        },
        expressionLSB: function(c, n2) {
          return [176 + _ch(c), 43, _7b(n2)];
        },
        damper: function(c, b) {
          if (typeof b == "undefined")
            b = true;
          return [176 + _ch(c), 64, b ? 127 : 0];
        },
        portamento: function(c, b) {
          if (typeof b == "undefined")
            b = true;
          return [176 + _ch(c), 65, b ? 127 : 0];
        },
        sostenuto: function(c, b) {
          if (typeof b == "undefined")
            b = true;
          return [176 + _ch(c), 66, b ? 127 : 0];
        },
        soft: function(c, b) {
          if (typeof b == "undefined")
            b = true;
          return [176 + _ch(c), 67, b ? 127 : 0];
        },
        legato: function(c, b) {
          if (typeof b == "undefined")
            b = true;
          return [176 + _ch(c), 68, b ? 127 : 0];
        },
        hold2: function(c, b) {
          if (typeof b == "undefined")
            b = true;
          return [176 + _ch(c), 69, b ? 127 : 0];
        },
        soundVariation: function(c, n2) {
          return [176 + _ch(c), 70, _7bn(n2)];
        },
        filterResonance: function(c, n2) {
          return [176 + _ch(c), 71, _7bn(n2)];
        },
        releaseTime: function(c, n2) {
          return [176 + _ch(c), 72, _7bn(n2)];
        },
        attackTime: function(c, n2) {
          return [176 + _ch(c), 73, _7bn(n2)];
        },
        brightness: function(c, n2) {
          return [176 + _ch(c), 74, _7bn(n2)];
        },
        decayTime: function(c, n2) {
          return [176 + _ch(c), 75, _7bn(n2)];
        },
        vibratoRate: function(c, n2) {
          return [176 + _ch(c), 76, _7bn(n2)];
        },
        vibratoDepth: function(c, n2) {
          return [176 + _ch(c), 77, _7bn(n2)];
        },
        vibratoDelay: function(c, n2) {
          return [176 + _ch(c), 78, _7bn(n2)];
        },
        ptc: function(c, n2) {
          return [176 + _ch(c), 84, _7bn(n2)];
        },
        dataIncr: function(c) {
          return [176 + _ch(c), 96, 0];
        },
        dataDecr: function(c) {
          return [176 + _ch(c), 97, 0];
        },
        nrpnLSB: function(c, n2) {
          return [176 + _ch(c), 98, _7b(n2)];
        },
        nrpnMSB: function(c, n2) {
          return [176 + _ch(c), 99, _7b(n2)];
        },
        rpnLSB: function(c, n2) {
          return [176 + _ch(c), 100, _7b(n2)];
        },
        rpnMSB: function(c, n2) {
          return [176 + _ch(c), 101, _7b(n2)];
        },
        allSoundOff: function(c) {
          return [176 + _ch(c), 120, 0];
        },
        resetAllControllers: function(c) {
          return [176 + _ch(c), 121, 0];
        },
        localControl: function(c, b) {
          if (typeof b == "undefined")
            b = true;
          return [176 + _ch(c), 122, b ? 127 : 0];
        },
        allNotesOff: function(c) {
          return [176 + _ch(c), 123, 0];
        },
        omni: function(c, b) {
          if (typeof b == "undefined")
            b = true;
          return [176 + _ch(c), b ? 125 : 124, 0];
        },
        mono: function(c, n2) {
          if (typeof n2 == "undefined")
            n2 = 1;
          return [176 + _ch(c), 126, _7b(n2)];
        },
        poly: function(c) {
          return [176 + _ch(c), 127, 0];
        }
      };
      function _splitMasterTuning(a, b, c, d) {
        if (typeof b != "undefined")
          return [_7b(a), _7b(b), _7b(c), _7b(d)];
        if (a != parseInt(a) || a < 0 || n > 65535)
          _bad(a);
        a = parseInt(a);
        return [a >> 12 & 15, a >> 8 & 15, a >> 4 & 15, a & 15];
      }
      function _gsxg12b(x) {
        _float(x);
        return Math.round(x * 1e3 + 1024);
      }
      var _helperNC = {
        // no channel
        mtc: function(t) {
          return [241, _mtc(t)];
        },
        songPosition: function(n2, l) {
          return typeof l == "undefined" ? [242, _lsb(n2), _msb(n2)] : [242, _7b(l), _7b(n2)];
        },
        songSelect: function(n2) {
          return [243, _7b(n2)];
        },
        tune: function() {
          return [246];
        },
        clock: function() {
          return [248];
        },
        start: function() {
          return [250];
        },
        continue: function() {
          return [251];
        },
        stop: function() {
          return [252];
        },
        active: function() {
          return [254];
        },
        sxIdRequest: function() {
          return [240, 126, this._sxid, 6, 1, 247];
        },
        sxTuningDumpRequest: function(n2, k2) {
          return typeof k2 == "undefined" ? [240, 126, this._sxid, 8, 0, _7b(n2), 247] : [240, 126, this._sxid, 8, 3, _7b(n2), _7b(k2), 247];
        },
        sxFullFrame: function(t) {
          return [240, 127, this._sxid, 1, 1, _hrtype(t), t.getMinute(), t.getSecond(), t.getFrame(), 247];
        },
        sxMasterVolume: function(n2, l) {
          return typeof l == "undefined" ? [240, 127, this._sxid, 4, 1, _lsb(n2), _msb(n2), 247] : [240, 127, this._sxid, 4, 1, _7b(l), _7b(n2), 247];
        },
        sxMasterVolumeF: function(x) {
          return _helperNC.sxMasterVolume.call(this, MIDI.to14b(_01(x)));
        },
        sxMasterFineTuning: function(n2, l) {
          return typeof l == "undefined" ? [240, 127, this._sxid, 4, 3, _lsb(n2), _msb(n2), 247] : [240, 127, this._sxid, 4, 3, _7b(l), _7b(n2), 247];
        },
        sxMasterFineTuningF: function(x) {
          return _helperNC.sxMasterFineTuning.call(this, MIDI.to14b(_01((x % 1 + 1) / 2, x)));
        },
        sxMasterCoarseTuning: function(n2) {
          return [240, 127, this._sxid, 4, 4, 0, _7b(n2), 247];
        },
        sxMasterCoarseTuningF: function(x) {
          return _helperNC.sxMasterCoarseTuning.call(this, 64 + (x - x % 1));
        },
        sxNoteTuning: function(a, b, c, d) {
          return b == parseInt(b) ? [240, _rt(d), this._sxid, 8, 7, _7b(a), _7b(b)].concat(_ntu(c), [247]) : [240, 127, this._sxid, 8, 2, _7b(a)].concat(_ntu(b), [247]);
        },
        sxNoteTuningF: function(a, b, c, d) {
          return b == parseInt(b) ? _helperNC.sxNoteTuning.call(this, a, b, _f2ntu(c), d) : _helperNC.sxNoteTuning.call(this, a, _f2ntu(b));
        },
        sxNoteTuningHZ: function(a, b, c, d) {
          return b == parseInt(b) ? _helperNC.sxNoteTuning.call(this, a, b, _hz2ntu(c), d) : _helperNC.sxNoteTuning.call(this, a, _hz2ntu(b));
        },
        sxScaleTuning1: function(a, b, c) {
          return a == parseInt(a) ? [240, _rt(c), this._sxid, 8, 8].concat(_to777(_16b(a)), _12x7(b), [247]) : _helperNC.sxScaleTuning1.call(this, 65535, a, b);
        },
        sxScaleTuning1F: function(a, b, c) {
          if (a != parseInt(a))
            return _helperNC.sxScaleTuning1F.call(this, 65535, a, b);
          var v = [];
          for (var i2 = 0; i2 < b.length; i2++) {
            if (b[i2] < -0.64 || b[i2] > 0.63)
              throw RangeError("Out of range: " + b[i2]);
            v.push(Math.floor(b[i2] * 100 + 64));
          }
          return _helperNC.sxScaleTuning1.call(this, a, v, c);
        },
        sxScaleTuning2: function(a, b, c) {
          return a == parseInt(a) ? [240, _rt(c), this._sxid, 8, 9].concat(_to777(_16b(a)), _12x14(b), [247]) : _helperNC.sxScaleTuning2.call(this, 65535, a, b);
        },
        sxScaleTuning2F: function(a, b, c) {
          if (a != parseInt(a))
            return _helperNC.sxScaleTuning2F.call(this, 65535, a, b);
          var v = [];
          for (var i2 = 0; i2 < b.length; i2++) {
            var x = (b[i2] + 1) / 2;
            if (x < -1 || x > 1)
              throw RangeError("Out of range: " + b[i2]);
            v.push(MIDI.to14b((b[i2] + 1) / 2));
          }
          return _helperNC.sxScaleTuning2.call(this, a, v, c);
        },
        sxGM: function(gm) {
          if (typeof gm == "undefined")
            gm = 1;
          return [240, 126, this._sxid, 9, gm ? gm == 2 ? 3 : 1 : 2, 247];
        },
        sxGS: function(arg) {
          var arr = typeof arg == "undefined" ? [64, 0, 127, 0] : arg instanceof Array ? arg : arguments;
          var c = 0;
          var a = [240, 65, this._sxid, 66, 18];
          for (var i2 = 0; i2 < arr.length; i2++) {
            var x = _7b(arr[i2]);
            a.push(x);
            c += x;
          }
          c %= 128;
          a.push(c ? 128 - c : 0);
          a.push(247);
          return a;
        },
        sxXG: function(arg) {
          var arr = typeof arg == "undefined" ? [0, 0, 126, 0] : arg instanceof Array ? arg : arguments;
          var sxid = this._sxid == 127 ? 0 : this._sxid;
          if (sxid > 15)
            _throw("Bad Yamaha device number: " + sxid);
          var a = [240, 67, 16 + sxid, 76];
          for (var i2 = 0; i2 < arr.length; i2++)
            a.push(_7b(arr[i2]));
          a.push(247);
          return a;
        },
        sxMidiSoft: function(n2, s) {
          var a = [240, 0, 32, 36, 0, _7b(n2 || 0)];
          s = typeof s == "undefined" ? "" : "" + s;
          for (var i2 = 0; i2 < s.length; i2++)
            a.push(_7b(s.charCodeAt(i2)));
          a.push(247);
          return a;
        },
        gsMasterVolume: function(n2) {
          return _helperNC.sxGS.call(this, [64, 0, 4, _7b(n2)]);
        },
        gsMasterVolumeF: function(x) {
          return _helperNC.gsMasterVolume.call(this, MIDI.to7b(_01(x)));
        },
        gsMasterFineTuning: function(a, b, c, d) {
          a = _splitMasterTuning(a, b, c, d);
          return _helperNC.sxGS.call(this, [64, 0, 0, a[0], a[1], a[2], a[3]]);
        },
        gsMasterFineTuningF: function(x) {
          return _helperNC.gsMasterFineTuning.call(this, _gsxg12b(x % 1));
        },
        gsMasterCoarseTuning: function(n2) {
          return _helperNC.sxGS.call(this, [64, 0, 5, _7b(n2)]);
        },
        gsMasterCoarseTuningF: function(x) {
          return _helperNC.gsMasterCoarseTuning.call(this, 64 + (x - x % 1));
        },
        gsOctaveTuning: function(c, n2, x) {
          return _helperNC.sxGS.call(this, [64, 16 + [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 11, 12, 13, 14, 15][_ch(c)], 64 + MIDI.octaveValue(n2), _7b(x)]);
        },
        gsOctaveTuningF: function(c, n2, x) {
          if (x < -0.64 || x > 0.63)
            throw RangeError("Out of range: " + x);
          return _helperNC.gsOctaveTuning.call(this, c, n2, Math.floor(x * 100 + 64));
        },
        xgMasterVolume: function(n2) {
          return _helperNC.sxXG.call(this, [0, 0, 4, _7b(n2)]);
        },
        xgMasterVolumeF: function(x) {
          return _helperNC.xgMasterVolume.call(this, MIDI.to7b(_01(x)));
        },
        xgMasterFineTuning: function(a, b, c, d) {
          a = _splitMasterTuning(a, b, c, d);
          return _helperNC.sxXG.call(this, [0, 0, 0, a[0], a[1], a[2], a[3]]);
        },
        xgMasterFineTuningF: function(x) {
          return _helperNC.xgMasterFineTuning.call(this, _gsxg12b(x % 1));
        },
        xgMasterCoarseTuning: function(n2) {
          return _helperNC.sxXG.call(this, [0, 0, 6, _7b(n2)]);
        },
        xgMasterCoarseTuningF: function(x) {
          return _helperNC.xgMasterCoarseTuning.call(this, 64 + (x - x % 1));
        },
        xgOctaveTuning: function(c, n2, x) {
          return _helperNC.sxXG.call(this, [8, _ch(c), 65 + MIDI.octaveValue(n2), _7b(x)]);
        },
        xgOctaveTuningF: function(c, n2, x) {
          if (x < -0.64 || x > 0.63)
            throw RangeError("Out of range: " + x);
          return _helperNC.xgOctaveTuning.call(this, c, n2, Math.floor(x * 100 + 64));
        },
        reset: function() {
          return [255];
        }
      };
      _helperNC.sxScaleTuning = _helperNC.sxScaleTuning2;
      _helperNC.sxScaleTuningF = _helperNC.sxScaleTuning2F;
      _helperNC.sxMasterTranspose = _helperNC.sxMasterCoarseTuning;
      _helperNC.sxMasterTransposeF = _helperNC.sxMasterCoarseTuningF;
      _helperNC.gsMasterTranspose = _helperNC.gsMasterCoarseTuning;
      _helperNC.gsMasterTransposeF = _helperNC.gsMasterCoarseTuningF;
      _helperNC.xgMasterTranspose = _helperNC.xgMasterCoarseTuning;
      _helperNC.xgMasterTransposeF = _helperNC.xgMasterCoarseTuningF;
      var _helperGCH = {
        // compound messages
        bank: function(c, m2, l) {
          return typeof l == "undefined" ? [_helperCH.bankMSB(c, _msb(m2)), _helperCH.bankLSB(c, _lsb(m2))] : [_helperCH.bankMSB(c, m2), _helperCH.bankLSB(c, l)];
        },
        modF: function(c, x) {
          return _helperGCH.mod(c, MIDI.to14b(x));
        },
        mod: function(c, m2, l) {
          return typeof l == "undefined" ? [_helperCH.modMSB(c, _msb(m2)), _helperCH.modLSB(c, _lsb(m2))] : [_helperCH.modMSB(c, m2), _helperCH.modLSB(c, l)];
        },
        breathF: function(c, x) {
          return _helperGCH.breath(c, MIDI.to14b(x));
        },
        breath: function(c, m2, l) {
          return typeof l == "undefined" ? [_helperCH.breathMSB(c, _msb(m2)), _helperCH.breathLSB(c, _lsb(m2))] : [_helperCH.breathMSB(c, m2), _helperCH.breathLSB(c, l)];
        },
        footF: function(c, x) {
          return _helperGCH.foot(c, MIDI.to14b(x));
        },
        foot: function(c, m2, l) {
          return typeof l == "undefined" ? [_helperCH.footMSB(c, _msb(m2)), _helperCH.footLSB(c, _lsb(m2))] : [_helperCH.footMSB(c, m2), _helperCH.footLSB(c, l)];
        },
        portamentoTimeF: function(c, x) {
          return _helperGCH.portamentoTime(c, MIDI.to14b(x));
        },
        portamentoTime: function(c, m2, l) {
          return typeof l == "undefined" ? [_helperCH.portamentoMSB(c, _msb(m2)), _helperCH.portamentoLSB(c, _lsb(m2))] : [_helperCH.portamentoMSB(c, m2), _helperCH.portamentoLSB(c, l)];
        },
        dataF: function(c, x) {
          return _helperGCH.data(c, MIDI.to14b(x));
        },
        data: function(c, m2, l) {
          return typeof l == "undefined" ? [_helperCH.dataMSB(c, _msb(m2)), _helperCH.dataLSB(c, _lsb(m2))] : [_helperCH.dataMSB(c, m2), _helperCH.dataLSB(c, l)];
        },
        volumeF: function(c, x) {
          return _helperGCH.volume(c, MIDI.to14b(x));
        },
        volume: function(c, m2, l) {
          return typeof l == "undefined" ? [_helperCH.volumeMSB(c, _msb(m2)), _helperCH.volumeLSB(c, _lsb(m2))] : [_helperCH.volumeMSB(c, m2), _helperCH.volumeLSB(c, l)];
        },
        balanceF: function(c, x) {
          return _helperGCH.balance(c, MIDI.to14b((x + 1) / 2));
        },
        balance: function(c, m2, l) {
          return typeof l == "undefined" ? [_helperCH.balanceMSB(c, _msb(m2)), _helperCH.balanceLSB(c, _lsb(m2))] : [_helperCH.balanceMSB(c, m2), _helperCH.balanceLSB(c, l)];
        },
        panF: function(c, x) {
          return _helperGCH.pan(c, MIDI.to14b((x + 1) / 2));
        },
        pan: function(c, m2, l) {
          return typeof l == "undefined" ? [_helperCH.panMSB(c, _msb(m2)), _helperCH.panLSB(c, _lsb(m2))] : [_helperCH.panMSB(c, m2), _helperCH.panLSB(c, l)];
        },
        expressionF: function(c, x) {
          return _helperGCH.expression(c, MIDI.to14b(x));
        },
        expression: function(c, m2, l) {
          return typeof l == "undefined" ? [_helperCH.expressionMSB(c, _msb(m2)), _helperCH.expressionLSB(c, _lsb(m2))] : [_helperCH.expressionMSB(c, m2), _helperCH.expressionLSB(c, l)];
        },
        nrpn: function(c, m2, l) {
          return typeof l == "undefined" ? [_helperCH.nrpnMSB(c, _msb(m2)), _helperCH.nrpnLSB(c, _lsb(m2))] : [_helperCH.nrpnMSB(c, m2), _helperCH.nrpnLSB(c, l)];
        },
        rpn: function(c, m2, l) {
          return typeof l == "undefined" ? [_helperCH.rpnMSB(c, _msb(m2)), _helperCH.rpnLSB(c, _lsb(m2))] : [_helperCH.rpnMSB(c, m2), _helperCH.rpnLSB(c, l)];
        },
        rpnPitchBendRange: function(c, m2, l) {
          return _helperGCH.rpn(c, 0, 0).concat(_helperGCH.data(c, m2, l));
        },
        rpnPitchBendRangeF: function(c, x) {
          return _helperGCH.rpnPitchBendRange(c, _7b(x - x % 1), Math.floor(x % 1 * 100));
        },
        rpnFineTuning: function(c, m2, l) {
          return _helperGCH.rpn(c, 0, 1).concat(_helperGCH.data(c, m2, l));
        },
        rpnFineTuningF: function(c, x) {
          return _helperGCH.rpn(c, 0, 1).concat(_helperGCH.dataF(c, (x % 1 + 1) / 2));
        },
        rpnCoarseTuning: function(c, m2) {
          return _helperGCH.rpn(c, 0, 2).concat([_helperCH.dataMSB(c, m2)]);
        },
        rpnCoarseTuningF: function(c, x) {
          return _helperGCH.rpn(c, 0, 2).concat([_helperCH.dataMSB(c, 64 + (x - x % 1))]);
        },
        rpnTuning: function(c, n2, m2, l) {
          return _helperGCH.rpnCoarseTuning(c, n2).concat(_helperGCH.rpnFineTuning(c, m2, l));
        },
        rpnTuningF: function(c, x) {
          return _helperGCH.rpnCoarseTuningF(c, x).concat(_helperGCH.rpnFineTuningF(c, x));
        },
        rpnTuningA: function(c, a) {
          return _helperGCH.rpnTuningF(c, MIDI.shift(a));
        },
        rpnSelectTuningProgram: function(c, n2) {
          return _helperGCH.rpn(c, 0, 3).concat([_helperCH.dataMSB(c, n2)]);
        },
        rpnSelectTuningBank: function(c, n2) {
          return _helperGCH.rpn(c, 0, 4).concat([_helperCH.dataMSB(c, n2)]);
        },
        rpnSelectTuning: function(c, n2, k2) {
          return typeof k2 == "undefined" ? _helperGCH.rpnSelectTuningProgram(c, n2) : _helperGCH.rpnSelectTuningBank(c, n2).concat(_helperGCH.rpnSelectTuningProgram(c, k2));
        },
        rpnModulationDepthRange: function(c, m2, l) {
          return _helperGCH.rpn(c, 0, 5).concat(_helperGCH.data(c, m2, l));
        },
        rpnModulationDepthRangeF: function(c, x) {
          return _helperGCH.rpnModulationDepthRange(c, _7b(x - x % 1), Math.floor(x % 1 * 128));
        },
        rpnNull: function(c) {
          return _helperGCH.rpn(c, 127, 127);
        },
        mode1: function(c) {
          return [_helperCH.omni(c, true), _helperCH.poly(c)];
        },
        mode2: function(c) {
          return [_helperCH.omni(c, true), _helperCH.mono(c)];
        },
        mode3: function(c) {
          return [_helperCH.omni(c, false), _helperCH.poly(c)];
        },
        mode4: function(c) {
          return [_helperCH.omni(c, false), _helperCH.mono(c)];
        }
      };
      var _helperGNC = {
        // compound messages no channel
        sxMasterTuning: function(n2, m2, l) {
          return [_helperNC.sxMasterCoarseTuning.call(this, n2), _helperNC.sxMasterFineTuning.call(this, m2, l)];
        },
        sxMasterTuningF: function(x) {
          return [_helperNC.sxMasterCoarseTuningF.call(this, x), _helperNC.sxMasterFineTuningF.call(this, x)];
        },
        gsMasterTuningF: function(x) {
          return [_helperNC.gsMasterCoarseTuningF.call(this, x), _helperNC.gsMasterFineTuningF.call(this, x)];
        },
        xgMasterTuningF: function(x) {
          return [_helperNC.xgMasterCoarseTuningF.call(this, x), _helperNC.xgMasterFineTuningF.call(this, x)];
        },
        sxMasterTuningA: function(a) {
          return _helperGNC.sxMasterTuningF.call(this, MIDI.shift(a));
        },
        gsMasterTuningA: function(a) {
          return _helperGNC.gsMasterTuningF.call(this, MIDI.shift(a));
        },
        xgMasterTuningA: function(a) {
          return _helperGNC.xgMasterTuningF.call(this, MIDI.shift(a));
        },
        gsScaleTuning: function(c, a) {
          var out = [];
          if (a.length != 12)
            throw RangeError("Wrong input size: " + a.length);
          for (var i2 = 0; i2 < 12; i2++)
            out.push(_helperNC.gsOctaveTuning.call(this, c, i2, a[i2]));
          return out;
        },
        gsScaleTuningF: function(c, a) {
          var out = [];
          if (a.length != 12)
            throw RangeError("Wrong input size: " + a.length);
          for (var i2 = 0; i2 < 12; i2++)
            out.push(_helperNC.gsOctaveTuningF.call(this, c, i2, a[i2]));
          return out;
        },
        xgScaleTuning: function(c, a) {
          var out = [];
          if (a.length != 12)
            throw RangeError("Wrong input size: " + a.length);
          for (var i2 = 0; i2 < 12; i2++)
            out.push(_helperNC.xgOctaveTuning.call(this, c, i2, a[i2]));
          return out;
        },
        xgScaleTuningF: function(c, a) {
          var out = [];
          if (a.length != 12)
            throw RangeError("Wrong input size: " + a.length);
          for (var i2 = 0; i2 < 12; i2++)
            out.push(_helperNC.xgOctaveTuningF.call(this, c, i2, a[i2]));
          return out;
        }
      };
      function _smf(ff, dd) {
        var midi = new MIDI();
        midi.ff = _8b(ff);
        midi.dd = typeof dd == "undefined" ? "" : _8bs(dd);
        return midi;
      }
      var _helperSMF = {
        // Standard MIDI File events
        smf: function(arg) {
          if (arg instanceof MIDI)
            return new MIDI(arg);
          var arr = arg instanceof Array ? arg : arguments;
          var ff = _8b(arr[0]);
          var dd = "";
          if (arr.length == 2)
            dd = _2s(arr[1]);
          else if (arr.length > 2)
            dd = _2s(Array.prototype.slice.call(arr, 1));
          return _smf(ff, dd);
        },
        smfSeqNumber: function(dd) {
          if (dd == parseInt(dd)) {
            if (dd < 0 || dd > 65535)
              throw RangeError("Sequence number out of range: " + dd);
            dd = String.fromCharCode(dd >> 8) + String.fromCharCode(dd & 255);
          } else {
            dd = "" + dd;
            if (dd.length == 0)
              dd = "\0\0";
            else if (dd.length == 1)
              dd = "\0" + dd;
            else if (dd.length > 2)
              throw RangeError("Sequence number out of range" + _smftxt(dd));
          }
          return _smf(0, dd);
        },
        smfText: function(dd) {
          return _smf(1, JZZ.lib.toUTF8(dd));
        },
        smfCopyright: function(dd) {
          return _smf(2, JZZ.lib.toUTF8(dd));
        },
        smfSeqName: function(dd) {
          return _smf(3, JZZ.lib.toUTF8(dd));
        },
        smfInstrName: function(dd) {
          return _smf(4, JZZ.lib.toUTF8(dd));
        },
        smfLyric: function(dd) {
          return _smf(5, JZZ.lib.toUTF8(dd));
        },
        smfMarker: function(dd) {
          return _smf(6, JZZ.lib.toUTF8(dd));
        },
        smfCuePoint: function(dd) {
          return _smf(7, JZZ.lib.toUTF8(dd));
        },
        smfProgName: function(dd) {
          return _smf(8, JZZ.lib.toUTF8(dd));
        },
        smfDevName: function(dd) {
          return _smf(9, JZZ.lib.toUTF8(dd));
        },
        smfChannelPrefix: function(dd) {
          if (dd == parseInt(dd)) {
            _validateChannel(dd);
            dd = String.fromCharCode(dd);
          } else {
            dd = "" + dd;
            if (dd.length == 0)
              dd = "\0";
            else if (dd.length > 1 || dd.charCodeAt(0) > 15)
              throw RangeError("Channel number out of range" + _smftxt(dd));
          }
          return _smf(32, dd);
        },
        smfMidiPort: function(dd) {
          if (dd == parseInt(dd)) {
            if (dd < 0 || dd > 127)
              throw RangeError("Port number out of range: " + dd);
            dd = String.fromCharCode(dd);
          } else {
            dd = "" + dd;
            if (dd.length == 0)
              dd = "\0";
            else if (dd.length > 1 || dd.charCodeAt(0) > 127)
              throw RangeError("Port number out of range" + _smftxt(dd));
          }
          return _smf(33, dd);
        },
        smfEndOfTrack: function(dd) {
          if (_2s(dd) != "")
            throw RangeError("Unexpected data" + _smftxt(_2s(dd)));
          return _smf(47);
        },
        smfTempo: function(dd) {
          if (("" + dd).length == 3)
            return _smf(81, dd);
          if (dd == parseInt(dd) && dd > 0 && dd <= 16777215) {
            return _smf(81, String.fromCharCode(dd >> 16) + String.fromCharCode(dd >> 8 & 255) + String.fromCharCode(dd & 255));
          }
          throw RangeError("Out of range" + _smftxt(_2s(dd)));
        },
        smfBPM: function(bpm) {
          return _helperSMF.smfTempo(Math.round(6e7 / bpm));
        },
        smfSMPTE: function(dd) {
          if (dd instanceof SMPTE)
            return _smf(84, String.fromCharCode(dd.hour) + String.fromCharCode(dd.minute) + String.fromCharCode(dd.second) + String.fromCharCode(dd.frame) + String.fromCharCode(dd.quarter % 4 * 25));
          var s = "" + dd;
          if (s.length == 5) {
            return _smf(84, dd);
          }
          var arr = dd instanceof Array ? dd : Array.prototype.slice.call(arguments);
          arr.splice(0, 0, 30);
          return _helperSMF.smfSMPTE(new SMPTE(arr));
        },
        smfTimeSignature: function(a, b, c, d) {
          var nn, dd, cc, bb;
          var m2 = ("" + a).match(/^\s*(\d+)\s*\/\s*(\d+)\s*$/);
          if (m2) {
            nn = parseInt(m2[1]);
            dd = parseInt(m2[2]);
            if (nn > 0 && nn < 256 && dd > 0 && !(dd & dd - 1)) {
              cc = dd;
              dd = 0;
              for (cc >>= 1; cc; cc >>= 1)
                dd++;
              cc = b == parseInt(b) ? b : 24;
              bb = c == parseInt(c) ? c : 8;
              return _smf(88, String.fromCharCode(nn) + String.fromCharCode(dd) + String.fromCharCode(cc) + String.fromCharCode(bb));
            } else if (("" + a).length == 4)
              return _smf(88, a);
          } else if (a == parseInt(a) && b == parseInt(b)) {
            if (a > 0 && a < 256 && b > 0 && !(b & b - 1)) {
              nn = a;
              dd = 0;
              cc = b;
              for (cc >>= 1; cc; cc >>= 1)
                dd++;
              cc = c == parseInt(c) ? c : 24;
              bb = d == parseInt(d) ? d : 8;
              return _smf(88, String.fromCharCode(nn) + String.fromCharCode(dd) + String.fromCharCode(cc) + String.fromCharCode(bb));
            } else if (("" + a).length == 4)
              return _smf(88, a);
            a = a + "/" + b;
          } else if (("" + a).length == 4)
            return _smf(88, a);
          throw RangeError("Wrong time signature" + _smftxt(_2s("" + a)));
        },
        smfKeySignature: function(dd) {
          dd = "" + dd;
          var m2 = dd.match(/^\s*([A-H][b#]?)\s*(|maj|major|dur|m|min|minor|moll)\s*$/i);
          if (m2) {
            var sf = {
              CB: 0,
              GB: 1,
              DB: 2,
              AB: 3,
              EB: 4,
              BB: 5,
              F: 6,
              C: 7,
              G: 8,
              D: 9,
              A: 10,
              E: 11,
              B: 12,
              H: 12,
              "F#": 13,
              "C#": 14,
              "G#": 15,
              "D#": 16,
              "A#": 17
            }[m2[1].toUpperCase()];
            var mi = { "": 0, MAJ: 0, MAJOR: 0, DUR: 0, M: 1, MIN: 1, MINOR: 1, MOLL: 1 }[m2[2].toUpperCase()];
            if (typeof sf != "undefined" && typeof mi != "undefined") {
              if (mi)
                sf -= 3;
              sf -= 7;
              if (sf >= -7 && sf < 0)
                dd = String.fromCharCode(256 + sf) + String.fromCharCode(mi);
              else if (sf >= 0 && sf <= 7)
                dd = String.fromCharCode(sf) + String.fromCharCode(mi);
            }
          }
          if (dd.length == 2 && dd.charCodeAt(1) <= 1 && (dd.charCodeAt(0) <= 7 || dd.charCodeAt(0) <= 255 && dd.charCodeAt(0) >= 249))
            return _smf(89, dd);
          throw RangeError("Incorrect key signature" + _smftxt(dd));
        },
        smfSequencer: function(dd) {
          return _smf(127, _2s(dd));
        }
      };
      var _helpers = {};
      function _copyHelperNC(name, func) {
        MIDI[name] = function() {
          return new MIDI(func.apply(this, arguments));
        };
        _helpers[name] = function() {
          return this.send(func.apply(this, arguments));
        };
      }
      function _copyHelperSMF(name, func) {
        MIDI[name] = function() {
          return func.apply(this, arguments);
        };
        _helpers[name] = function() {
          return this.send(func.apply(this, arguments));
        };
      }
      function _copyHelperGNC(name, func) {
        MIDI[name] = function() {
          var i2;
          var g = [];
          var a = func.apply(this, arguments);
          for (i2 = 0; i2 < a.length; i2++)
            g.push(new MIDI(a[i2]));
          return g;
        };
        _helpers[name] = function() {
          var a = func.apply(this, arguments);
          var g = this;
          for (var i2 = 0; i2 < a.length; i2++)
            g = g.send(a[i2]);
          return g;
        };
      }
      function _copyHelperMPE(name, func) {
        MIDI[name] = function() {
          return new MIDI(func.apply(this, typeof this._ch == "undefined" ? arguments : [this._ch].concat(Array.prototype.slice.call(arguments))));
        };
        _helpers[name] = function() {
          if (typeof this._master != "undefined") {
            var msg = new MIDI(func.apply(this, [this._master].concat(Array.prototype.slice.call(arguments))));
            msg._mpe = msg[1];
            return this.send(msg);
          }
          return this.send(func.apply(this, typeof this._ch == "undefined" ? arguments : [this._ch].concat(Array.prototype.slice.call(arguments))));
        };
      }
      function _copyHelperCH(name, func) {
        MIDI[name] = function() {
          return new MIDI(func.apply(this, typeof this._ch == "undefined" ? arguments : [this._ch].concat(Array.prototype.slice.call(arguments))));
        };
        _helpers[name] = function() {
          if (typeof this._master != "undefined") {
            var chan;
            var args = Array.prototype.slice.call(arguments);
            if (args.length < func.length)
              args = [this._master].concat(args);
            else {
              chan = _7bn(args[0]);
              args[0] = this._master;
            }
            var msg = new MIDI(func.apply(this, args));
            msg._mpe = chan;
            return this.send(msg);
          }
          return this.send(func.apply(this, typeof this._ch == "undefined" ? arguments : [this._ch].concat(Array.prototype.slice.call(arguments))));
        };
      }
      function _copyHelperGCH(name, func) {
        MIDI[name] = function() {
          var i2;
          var g = [];
          var a = func.apply(this, typeof this._ch == "undefined" ? arguments : [this._ch].concat(Array.prototype.slice.call(arguments)));
          for (i2 = 0; i2 < a.length; i2++)
            g.push(new MIDI(a[i2]));
          return g;
        };
        _helpers[name] = function() {
          var i2;
          var a;
          var g;
          if (typeof this._master != "undefined") {
            var chan;
            var args = Array.prototype.slice.call(arguments);
            if (args.length < func.length)
              args = [this._master].concat(args);
            else {
              chan = _7bn(args[0]);
              args[0] = this._master;
            }
            a = func.apply(this, args);
            g = this;
            for (i2 = 0; i2 < a.length; i2++) {
              var msg = MIDI(a[i2]);
              msg._mpe = chan;
              g = g.send(msg);
            }
            return g;
          }
          a = func.apply(this, typeof this._ch == "undefined" ? arguments : [this._ch].concat(Array.prototype.slice.call(arguments)));
          g = this;
          for (i2 = 0; i2 < a.length; i2++)
            g = g.send(a[i2]);
          return g;
        };
      }
      _for(_helperNC, function(n2) {
        _copyHelperNC(n2, _helperNC[n2]);
      });
      _for(_helperSMF, function(n2) {
        _copyHelperSMF(n2, _helperSMF[n2]);
      });
      _for(_helperGNC, function(n2) {
        _copyHelperGNC(n2, _helperGNC[n2]);
      });
      _for(_helperMPE, function(n2) {
        _copyHelperMPE(n2, _helperMPE[n2]);
      });
      _for(_helperCH, function(n2) {
        _copyHelperCH(n2, _helperCH[n2]);
      });
      _for(_helperGCH, function(n2) {
        _copyHelperGCH(n2, _helperGCH[n2]);
      });
      function _copyMidiHelpers(M) {
        _for(_helpers, function(n2) {
          M.prototype[n2] = _helpers[n2];
        });
      }
      _copyMidiHelpers(_M);
      var _channelMap = { a: 10, b: 11, c: 12, d: 13, e: 14, f: 15, A: 10, B: 11, C: 12, D: 13, E: 14, F: 15 };
      for (k = 0; k < 16; k++)
        _channelMap[k] = k;
      MIDI.prototype.getChannel = function() {
        if (this.ff == 32 && this.dd.length == 1 && this.dd.charCodeAt(0) < 16)
          return this.dd.charCodeAt(0);
        var c = this[0];
        if (typeof c == "undefined" || c < 128 || c > 239)
          return;
        return c & 15;
      };
      MIDI.prototype.setChannel = function(x) {
        x = _channelMap[x];
        if (typeof x == "undefined")
          return this;
        if (this.ff == 32)
          this.dd = String.fromCharCode(x);
        else {
          var c = this[0];
          if (typeof c != "undefined" && c >= 128 && c <= 239)
            this[0] = c & 240 | x;
        }
        return this;
      };
      MIDI.prototype.getNote = function() {
        var c = this[0];
        if (typeof c == "undefined" || c < 128 || c > 175)
          return;
        return this[1];
      };
      MIDI.prototype.setNote = function(x) {
        var c = this[0];
        if (typeof c == "undefined" || c < 128 || c > 175)
          return this;
        x = MIDI.noteValue(x);
        if (typeof x != "undefined")
          this[1] = x;
        return this;
      };
      MIDI.prototype.getVelocity = function() {
        var c = this[0];
        if (typeof c == "undefined" || c < 128 || c > 159)
          return;
        return this[2];
      };
      MIDI.prototype.setVelocity = function(x) {
        var c = this[0];
        if (typeof c == "undefined" || c < 128 || c > 159)
          return this;
        x = parseInt(x);
        if (x >= 0 && x < 128)
          this[2] = x;
        return this;
      };
      MIDI.prototype.getSysExId = function() {
        if (this[0] == 240)
          return this[2];
      };
      MIDI.prototype.setSysExId = function(x) {
        if (this[0] == 240 && this.length > 2) {
          x = parseInt(x);
          if (x >= 0 && x < 128)
            this[2] = x;
        }
        return this;
      };
      MIDI.prototype.getData = function() {
        if (typeof this.dd != "undefined")
          return this.dd.toString();
      };
      MIDI.prototype.setData = function(dd) {
        this.dd = _2s(dd);
        return this;
      };
      function _is_yamaha_smf(ff, dd) {
        return ff == 127 && typeof dd != "undefined" && dd.charCodeAt(0) == 67 && dd.charCodeAt(1) == 123;
      }
      function _is_yamaha_chord(ff, dd) {
        return _is_yamaha_smf(ff, dd) && dd.charCodeAt(2) == 1;
      }
      function _yamaha_chord(a, b) {
        if (a >= 0 && a <= 127 && b >= 0 && b <= 127) {
          var c = a & 15;
          var d = a >> 4;
          if (c > 0 && c < 8 && d < 7)
            c = ["C", "D", "E", "F", "G", "A", "B"][c - 1] + ["bbb", "bb", "b", "", "#", "##", "###"][d];
          else
            return "-";
          if (b > 34)
            return c + "?";
          else
            return c + [
              "",
              "6",
              "Maj7",
              "Maj7(#11)",
              "(9)",
              "Maj7(9)",
              "6(9)",
              "aug",
              "m",
              "m6",
              "m7",
              "m7b5",
              "m(9)",
              "m7(9)",
              "m7(11)",
              "m+7",
              "m+7(9)",
              "dim",
              "dim7",
              "7",
              "7sus4",
              "7b5",
              "7(9)",
              "7(#11)",
              "7(13)",
              "7(b9)",
              "7(b13)",
              "7(#9)",
              "Maj7aug",
              "7aug",
              "1+8",
              "1+5",
              "sus4",
              "1+2+5",
              "cc"
            ][b];
        }
        return "-";
      }
      MIDI.prototype.getText = function() {
        if (typeof this.dd != "undefined") {
          if (_is_yamaha_chord(this.ff, this.dd))
            return _yamaha_chord(this.dd.charCodeAt(3), this.dd.charCodeAt(4));
          else
            return JZZ.lib.fromUTF8(this.dd);
        }
        if (this.isMidiSoft()) {
          var s = [];
          for (var i2 = 6; i2 < this.length - 1; i2++)
            s.push(String.fromCharCode(this[i2]));
          return s.join("");
        }
      };
      MIDI.prototype.setText = function(dd) {
        this.dd = JZZ.lib.toUTF8(dd);
        return this;
      };
      MIDI.prototype.getTempo = function() {
        if (this.ff == 81 && typeof this.dd != "undefined") {
          return this.dd.charCodeAt(0) * 65536 + this.dd.charCodeAt(1) * 256 + this.dd.charCodeAt(2);
        }
      };
      MIDI.prototype.getBPM = function() {
        var ms = this.getTempo();
        if (ms)
          return 6e7 / ms;
      };
      MIDI.prototype.getTimeSignature = function() {
        if (this.ff == 88 && typeof this.dd != "undefined") {
          return [this.dd.charCodeAt(0), 1 << this.dd.charCodeAt(1)];
        }
      };
      MIDI.prototype.getKeySignature = function() {
        if (this.ff == 89 && typeof this.dd != "undefined") {
          var sf = this.dd.charCodeAt(0);
          var mi = this.dd.charCodeAt(1);
          if (sf & 128)
            sf = sf - 256;
          if (sf >= -7 && sf <= 7 && mi >= 0 && mi <= 1) {
            return [
              sf,
              ["Cb", "Gb", "Db", "Ab", "Eb", "Bb", "F", "C", "G", "D", "A", "E", "B", "F#", "C#", "G#", "D#", "A#"][mi ? sf + 10 : sf + 7],
              !!mi
            ];
          }
        }
      };
      MIDI.prototype.isNoteOn = function() {
        var c = this[0];
        if (typeof c == "undefined" || c < 144 || c > 159)
          return false;
        return this[2] > 0 ? true : false;
      };
      MIDI.prototype.isNoteOff = function() {
        var c = this[0];
        if (typeof c == "undefined" || c < 128 || c > 159)
          return false;
        if (c < 144)
          return true;
        return this[2] == 0 ? true : false;
      };
      MIDI.prototype.isSysEx = function() {
        return this[0] == 240;
      };
      MIDI.prototype.isFullSysEx = function() {
        return this[0] == 240 && this[this.length - 1] == 247;
      };
      MIDI.prototype.isMidiSoft = function() {
        return this.isFullSysEx() && this[1] == 0 && this[2] == 32 && this[3] == 36 && this[4] == 0;
      };
      MIDI.prototype.isSMF = function() {
        return this.ff >= 0 && this.ff <= 127;
      };
      MIDI.prototype.isEOT = function() {
        return this.ff == 47;
      };
      MIDI.prototype.isTempo = function() {
        return this.ff == 81;
      };
      MIDI.prototype.isTimeSignature = function() {
        return this.ff == 88;
      };
      MIDI.prototype.isKeySignature = function() {
        return this.ff == 89;
      };
      MIDI.prototype.isGmReset = function() {
        return this.match([240, 126, [0, 0], 9, [0, 0], 247]);
      };
      MIDI.prototype.isGsReset = function() {
        return this.match([240, 65, [0, 0], 66, 18, 64, 0, 127, 0, 65, 247]);
      };
      MIDI.prototype.isXgReset = function() {
        return this.match([240, 67, [16, 240], 76, 0, 0, 126, 0, 247]);
      };
      MIDI.prototype.match = function(a) {
        var i2, m2;
        for (i2 = 0; i2 < a.length; i2++) {
          m2 = a[i2][1];
          if (typeof m2 == "undefined") {
            if (this[i2] != a[i2])
              return false;
          } else {
            if ((this[i2] & m2) != (a[i2][0] & m2))
              return false;
          }
        }
        return true;
      };
      function _s2a(x) {
        var a = [];
        for (var i2 = 0; i2 < x.length; i2++) {
          a[i2] = x.charCodeAt(i2);
        }
        return a;
      }
      function _a2s(x) {
        var a = "";
        for (var i2 = 0; i2 < x.length; i2++) {
          a += String.fromCharCode(x[i2]);
        }
        return a;
      }
      function _2s(x) {
        return x instanceof Array ? _a2s(x) : typeof x == "undefined" ? "" : "" + x;
      }
      function _s2n(x) {
        var n2 = 0;
        for (var i2 = 0; i2 < x.length; i2++)
          n2 = (n2 << 8) + x.charCodeAt(i2);
        return n2;
      }
      function __hex(x) {
        return (x < 16 ? "0" : "") + x.toString(16);
      }
      function _hex(x) {
        var a = [];
        for (var i2 = 0; i2 < x.length; i2++) {
          a[i2] = __hex(x[i2]);
        }
        return a.join(" ");
      }
      function _toLine(s) {
        var out = "";
        for (var i2 = 0; i2 < s.length; i2++) {
          if (s[i2] == "\n")
            out += "\\n";
          else if (s[i2] == "\r")
            out += "\\r";
          else if (s[i2] == "	")
            out += "\\t";
          else if (s.charCodeAt(i2) < 32)
            out += "\\x" + __hex(s.charCodeAt(i2));
          else
            out += s[i2];
        }
        return out;
      }
      function _smfhex(dd) {
        return dd.length ? ": " + _hex(_s2a(dd)) : "";
      }
      function _smftxt(dd) {
        return dd.length ? ": " + _toLine(JZZ.lib.fromUTF8(dd)) : "";
      }
      MIDI.prototype.label = function(s) {
        this.lbl = this.lbl ? this.lbl + ", " + s : s;
        return this;
      };
      MIDI.prototype.toString = function() {
        return this.lbl ? this._str() + " (" + this.lbl + ")" : this._str();
      };
      MIDI.prototype._str = function() {
        var s;
        var ss;
        if (!this.length) {
          if (typeof this.ff != "undefined") {
            s = "ff" + __hex(this.ff) + " -- ";
            if (this.ff == 0)
              s += "Sequence Number: " + _s2n(this.dd);
            else if (this.ff > 0 && this.ff < 10)
              s += ["", "Text", "Copyright", "Sequence Name", "Instrument Name", "Lyric", "Marker", "Cue Point", "Program Name", "Device Name"][this.ff] + _smftxt(this.dd);
            else if (this.ff == 32)
              s += "Channel Prefix" + _smfhex(this.dd);
            else if (this.ff == 33)
              s += "MIDI Port" + _smfhex(this.dd);
            else if (this.ff == 47)
              s += "End of Track" + _smfhex(this.dd);
            else if (this.ff == 81) {
              var bpm = Math.round(this.getBPM() * 100) / 100;
              s += "Tempo: " + bpm + " bpm";
            } else if (this.ff == 84)
              s += "SMPTE Offset: " + _smptetxt(_s2a(this.dd));
            else if (this.ff == 88) {
              var d = 1 << this.dd.charCodeAt(1);
              s += "Time Signature: " + this.dd.charCodeAt(0) + "/" + d;
              s += " " + this.dd.charCodeAt(2) + " " + this.dd.charCodeAt(3);
            } else if (this.ff == 89) {
              s += "Key Signature: ";
              var ks = this.getKeySignature();
              if (ks) {
                s += ks[1];
                if (ks[2])
                  s += " min";
              } else
                s += "invalid";
            } else if (this.ff == 127) {
              if (this.dd.charCodeAt(0) == 67) {
                if (this.dd.charCodeAt(1) == 123) {
                  s += "[XF:" + __hex(this.dd.charCodeAt(2)) + "]";
                  ss = {
                    0: "Version",
                    1: "Chord",
                    2: "Rehearsal Mark",
                    3: "Phrase Mark",
                    4: "Max Phrase Mark",
                    5: "Fingering Number",
                    12: "Guide Track Flag",
                    16: "Guitar Info",
                    18: "Chord Voicing",
                    127: "XG Song Data Number"
                  }[this.dd.charCodeAt(2)];
                  s += ss ? " " + ss : "";
                  s += ": ";
                  if (this.dd.charCodeAt(2) == 0) {
                    return s + this.dd.substr(3, 4) + " " + _hex(_s2a(this.dd.substr(7)));
                  }
                  if (this.dd.charCodeAt(2) == 1) {
                    return s + this.getText();
                  }
                  return s + _hex(_s2a(this.dd.substr(3)));
                }
              }
              s += "Sequencer Specific" + _smfhex(this.dd);
            } else
              s += "SMF" + _smfhex(this.dd);
            return s;
          }
          return "empty";
        }
        s = _hex(this);
        if (this[0] < 128)
          return s;
        ss = {
          241: "MIDI Time Code",
          242: "Song Position",
          243: "Song Select",
          244: "Undefined",
          245: "Undefined",
          246: "Tune request",
          248: "Timing clock",
          249: "Undefined",
          250: "Start",
          251: "Continue",
          252: "Stop",
          253: "Undefined",
          254: "Active Sensing",
          255: "Reset"
        }[this[0]];
        if (ss)
          return s + " -- " + ss;
        if (this.isMidiSoft()) {
          ss = _toLine(this.getText());
          if (ss)
            ss = " " + ss;
          return s + " -- [K:" + __hex(this[5]) + "]" + ss;
        }
        var c = this[0] >> 4;
        ss = { 8: "Note Off", 10: "Aftertouch", 12: "Program Change", 13: "Channel Aftertouch", 14: "Pitch Wheel" }[c];
        if (ss)
          return s + " -- " + ss;
        if (c == 9)
          return s + " -- " + (this[2] ? "Note On" : "Note Off");
        if (c != 11)
          return s;
        ss = {
          0: "Bank Select MSB",
          1: "Modulation Wheel MSB",
          2: "Breath Controller MSB",
          4: "Foot Controller MSB",
          5: "Portamento Time MSB",
          6: "Data Entry MSB",
          7: "Channel Volume MSB",
          8: "Balance MSB",
          10: "Pan MSB",
          11: "Expression Controller MSB",
          12: "Effect Control 1 MSB",
          13: "Effect Control 2 MSB",
          16: "General Purpose Controller 1 MSB",
          17: "General Purpose Controller 2 MSB",
          18: "General Purpose Controller 3 MSB",
          19: "General Purpose Controller 4 MSB",
          31: "Karaoke",
          32: "Bank Select LSB",
          33: "Modulation Wheel LSB",
          34: "Breath Controller LSB",
          36: "Foot Controller LSB",
          37: "Portamento Time LSB",
          38: "Data Entry LSB",
          39: "Channel Volume LSB",
          40: "Balance LSB",
          42: "Pan LSB",
          43: "Expression Controller LSB",
          44: "Effect control 1 LSB",
          45: "Effect control 2 LSB",
          48: "General Purpose Controller 1 LSB",
          49: "General Purpose Controller 2 LSB",
          50: "General Purpose Controller 3 LSB",
          51: "General Purpose Controller 4 LSB",
          64: "Damper Pedal",
          65: "Portamento",
          66: "Sostenuto",
          67: "Soft Pedal",
          68: "Legato",
          69: "Hold 2",
          70: "Sound Variation",
          71: "Filter Resonance",
          72: "Release Time",
          73: "Attack Time",
          74: "Brightness",
          75: "Decay Time",
          76: "Vibrato Rate",
          77: "Vibrato Depth",
          78: "Vibrato Delay",
          79: "Sound Controller 10",
          80: "General Purpose Controller 5",
          81: "General Purpose Controller 6",
          82: "General Purpose Controller 7",
          83: "General Purpose Controller 8",
          84: "Portamento Control",
          88: "High Resolution Velocity Prefix",
          91: "Effects 1 Depth",
          92: "Effects 2 Depth",
          93: "Effects 3 Depth",
          94: "Effects 4 Depth",
          95: "Effects 5 Depth",
          96: "Data Increment",
          97: "Data Decrement",
          98: "Non-Registered Parameter Number LSB",
          99: "Non-Registered Parameter Number MSB",
          100: "Registered Parameter Number LSB",
          101: "Registered Parameter Number MSB",
          120: "All Sound Off",
          121: "Reset All Controllers",
          122: "Local Control On/Off",
          123: "All Notes Off",
          124: "Omni Mode Off",
          125: "Omni Mode On",
          126: "Mono Mode On",
          127: "Poly Mode On"
        }[this[1]];
        if (this[1] >= 64 && this[1] <= 69)
          ss += this[2] < 64 ? " Off" : " On";
        if (!ss)
          ss = "Undefined";
        return s + " -- " + ss;
      };
      MIDI.prototype._stamp = function(obj) {
        this._from.push(obj._orig ? obj._orig : obj);
        return this;
      };
      MIDI.prototype._unstamp = function(obj) {
        if (typeof obj == "undefined")
          this._from = [];
        else {
          if (obj._orig)
            obj = obj._orig;
          var i2 = this._from.indexOf(obj);
          if (i2 > -1)
            this._from.splice(i2, 1);
        }
        return this;
      };
      MIDI.prototype._stamped = function(obj) {
        if (obj._orig)
          obj = obj._orig;
        for (var i2 = 0; i2 < this._from.length; i2++)
          if (this._from[i2] == obj)
            return true;
        return false;
      };
      JZZ.MIDI = MIDI;
      _J.prototype.MIDI = MIDI;
      function _clear_ctxt() {
        var i2;
        this._cc = [];
        for (i2 = 0; i2 < 16; i2++)
          this._cc[i2] = {};
      }
      function _rpn_txt(msb, lsb) {
        var a = typeof msb == "undefined" ? "??" : __hex(msb);
        var b = typeof lsb == "undefined" ? "??" : __hex(lsb);
        var c = {
          "0000": "Pitch Bend Sensitivity",
          "0001": "Channel Fine Tune",
          "0002": "Channel Coarse Tune",
          "0003": "Select Tuning Program",
          "0004": "Select Tuning Bank",
          "0005": "Vibrato Depth Range",
          "7f7f": "NONE"
        }[a + "" + b];
        return "RPN " + a + " " + b + (c ? ": " + c : "");
      }
      function _nrpn_txt(msb, lsb) {
        var a = typeof msb == "undefined" ? "??" : __hex(msb);
        var b = typeof lsb == "undefined" ? "??" : __hex(lsb);
        return "NRPN " + a + " " + b;
      }
      function _read_ctxt(msg) {
        if (!msg.length || msg[0] < 128)
          return msg;
        if (msg[0] == 255) {
          this._clear();
          return msg;
        }
        var ch = msg[0] & 15;
        var st = msg[0] >> 4;
        var s;
        if (st == 12) {
          msg._bm = this._cc[ch].bm;
          msg._bl = this._cc[ch].bl;
          if (JZZ.MIDI.programName)
            msg.label(JZZ.MIDI.programName(msg[1], msg._bm, msg._bl));
        } else if (st == 11) {
          switch (msg[1]) {
            case 0:
              this._cc[ch].bm = msg[2];
              break;
            case 32:
              this._cc[ch].bl = msg[2];
              break;
            case 98:
              this._cc[ch].nl = msg[2];
              this._cc[ch].rn = "n";
              break;
            case 99:
              this._cc[ch].nm = msg[2];
              this._cc[ch].rn = "n";
              break;
            case 100:
              this._cc[ch].rl = msg[2];
              this._cc[ch].rn = "r";
              break;
            case 101:
              this._cc[ch].rm = msg[2];
              this._cc[ch].rn = "r";
              break;
            case 6:
            case 38:
            case 96:
            case 97:
              if (this._cc[ch].rn == "r") {
                msg._rm = this._cc[ch].rm;
                msg._rl = this._cc[ch].rl;
                msg.label(_rpn_txt(this._cc[ch].rm, this._cc[ch].rl));
              }
              if (this._cc[ch].rn == "n") {
                msg._nm = this._cc[ch].rm;
                msg._nl = this._cc[ch].nl;
                msg.label(_nrpn_txt(this._cc[ch].nm, this._cc[ch].nl));
              }
              break;
          }
        } else if (msg.isFullSysEx()) {
          if (msg[1] == 127) {
            if (msg[3] == 4) {
              s = { 1: "Master Volume", 2: "Master Balance", 3: "Master Fine Tuning", 4: "Master Coarse Tuning" }[msg[4]];
              if (s)
                msg.label(s);
            } else if (msg[3] == 8) {
              s = { 2: "Note Tuning", 7: "Note Tuning, Bank", 8: "Scale Tuning, 1 byte format", 9: "Scale Tuning, 2 byte format" }[msg[4]];
              if (s)
                msg.label(s);
            }
          } else if (msg[1] == 126) {
            if (msg[3] == 6) {
              if (msg[4] == 1)
                msg.label("Device ID Request");
              else if (msg[4] == 2) {
                msg.label("Device ID Response");
              }
            } else if (msg[3] == 8) {
              s = {
                0: "Bulk Tuning Dump Request",
                1: "Bulk Tuning Dump",
                3: "Bulk Tuning Dump Request, Bank",
                4: "Bulk Tuning Dump, Bank",
                5: "Scale Tuning Dump, 1 byte format",
                6: "Scale Tuning Dump, 2 byte format",
                7: "Note Tuning, Bank",
                8: "Scale Tuning, 1 byte format",
                9: "Scale Tuning, 2 byte format"
              }[msg[4]];
              if (s)
                msg.label(s);
            } else if (msg[3] == 9) {
              if (msg[4] == 1) {
                msg.label("GM1 System On");
                this._clear();
                this._gm = "1";
              } else if (msg[4] == 2) {
                msg.label("GM System Off");
                this._clear();
                this._gm = "0";
              } else if (msg[4] == 3) {
                msg.label("GM2 System On");
                this._clear();
                this._gm = "2";
              }
            }
          } else if (msg[1] == 67) {
            if ((msg[2] & 240) == 16 && msg[3] == 76) {
              if (msg[4] == 0 && msg[5] == 0 && msg[6] == 126 && msg[7] == 0) {
                msg.label("XG System On");
                this._clear();
                this._gm = "Y";
              } else if (msg[4] == 0 && msg[5] == 0 && msg[6] == 0)
                msg.label("XG Master Tuning");
              else if (msg[4] == 0 && msg[5] == 0 && msg[6] == 4)
                msg.label("XG Master Volume");
              else if (msg[4] == 0 && msg[5] == 0 && msg[6] == 6)
                msg.label("XG Master Transpose");
              else if (msg[4] == 8 && msg[5] < 16 && msg[6] >= 65 && msg[6] <= 76)
                msg.label("XG Scale Tuning");
              else
                msg.label("XG Parameter");
            }
          } else if (msg[1] == 65) {
            if (msg[3] == 66 && msg[4] == 18) {
              if (msg[5] == 64) {
                if (msg[6] == 0) {
                  if (msg[7] == 127 && msg[8] == 0 && msg[9] == 65) {
                    msg.label("GS Reset");
                    this._clear();
                    this._gm = "R";
                  } else if (msg[7] == 0)
                    msg.label("GS Master Tuning");
                  else if (msg[7] == 4)
                    msg.label("GS Master Volume");
                  else if (msg[7] == 5)
                    msg.label("GS Master Transpose");
                  else
                    msg.label("GS Parameter");
                } else if ((msg[6] & 240) == 16 && msg[7] == 21)
                  msg.label("GS Drum Part Change");
                else if ((msg[6] & 240) == 16 && msg[7] >= 64 && msg[7] <= 75)
                  msg.label("GS Scale Tuning");
                else
                  msg.label("GS Parameter");
              }
              if (msg[5] == 65)
                msg.label("GS Parameter");
            }
          }
        }
        return msg;
      }
      function Context() {
        var self = new _M();
        self._clear = _clear_ctxt;
        self._read = _read_ctxt;
        self._receive = function(msg) {
          this._emit(this._read(msg));
        };
        self._clear();
        self._resume();
        return self;
      }
      JZZ.Context = Context;
      _J.prototype.Context = Context;
      function MPE() {
        var self = this instanceof MPE ? this : self = new MPE();
        self.reset();
        if (arguments.length)
          MPE.prototype.setup.apply(self, arguments);
        return self;
      }
      MPE.validate = function(arg) {
        var a = arg instanceof Array ? arg : arguments;
        if (a[0] != parseInt(a[0]) || a[0] < 0 || a[0] > 14)
          throw RangeError("Bad master channel value: " + a[0]);
        if (a[1] != parseInt(a[1]) || a[1] < 0 || a[0] + a[1] > 15)
          throw RangeError("Bad zone size value: " + a[1]);
      };
      MPE.prototype.reset = function() {
        for (var n2 = 0; n2 < 16; n2++)
          this[n2] = { band: 0, master: n2 };
      };
      MPE.prototype.setup = function(m2, n2) {
        MPE.validate(m2, n2);
        var k2;
        var last = m2 + n2;
        if (this[m2].master == m2 && this[m2].band == n2)
          return;
        if (!n2 && !this[m2].band)
          return;
        if (this[m2].band) {
          k2 = m2 + this[m2].band;
          if (last < k2)
            last = k2;
        } else if (this[m2].master == m2 - 1) {
          k2 = m2 - 1;
          k2 = k2 + this[k2].band;
          if (last < k2)
            last = k2;
          this[m2 - 1] = { band: 0, master: m2 - 1 };
        } else if (this[m2].master != m2) {
          k2 = this[m2].master;
          k2 = k2 + this[k2].band;
          if (last < k2)
            last = k2;
          this[this[m2].master].band = m2 - this[m2].master - 1;
        }
        this[m2].master = m2;
        this[m2].band = n2;
        for (k2 = m2 + 1; k2 <= m2 + n2; k2++) {
          if (this[k2].band && last < k2 + this[k2].band)
            last = k2 + this[k2].band;
          this[k2] = { band: 0, master: m2 };
        }
        for (; k2 <= last; k2++)
          this[k2] = { band: 0, master: k2 };
      };
      MPE.prototype.filter = function(msg) {
        var c = msg.getChannel();
        if (!this[c] || !this[this[c].master].band)
          return msg;
        var m2 = this[c].master;
        var n2 = this[m2].band;
        var i2, j2, k2;
        if (typeof msg._mpe != "undefined") {
          k2 = 256;
          for (i2 = m2 + 1; i2 <= m2 + n2; i2++) {
            if (!this[i2].notes) {
              if (k2 > 0) {
                c = i2;
                k2 = 0;
              }
            } else {
              if (k2 > this[i2].notes.length) {
                c = i2;
                k2 = this[i2].notes.length;
              }
              for (j2 = 0; j2 < this[i2].notes.length; j2++) {
                if (this[i2].notes[j2] == msg._mpe) {
                  c = i2;
                  k2 = -1;
                  break;
                }
              }
            }
          }
          msg.setChannel(c);
          msg._mpe = void 0;
        }
        if (c == m2)
          return msg;
        if (msg.isNoteOn()) {
          if (!this[c].notes)
            this[c].notes = [];
          _push(this[c].notes, msg.getNote());
        } else if (msg.isNoteOff()) {
          if (this[c].notes)
            _pop(this[c].notes, msg.getNote());
        }
        return msg;
      };
      JZZ.MPE = MPE;
      JZZ.lib = {};
      JZZ.lib.now = _now;
      JZZ.lib.schedule = _schedule;
      var _sch_list = [];
      var _sch_worker;
      var _sch_count = 0;
      try {
        var _blob = URL.createObjectURL(new Blob(["(", function() {
          function tick() {
            postMessage({});
            setTimeout(tick, 0);
          }
          tick();
        }.toString(), ")()"], { type: "application/javascript" }));
        var _sch_tick = function() {
          var n2 = _sch_list.length;
          for (var i2 = 0; i2 < n2; i2++)
            _sch_list.shift()();
          _sch_count++;
          if (_sch_count > 20 && _sch_worker) {
            _sch_worker.terminate();
            _sch_worker = void 0;
          }
        };
        var _sch = function(x) {
          _sch_list.push(x);
          _sch_count = 0;
          if (!_sch_worker) {
            _sch_worker = new Worker(_blob);
            _sch_worker.onmessage = _sch_tick;
          }
        };
        _sch(function() {
          JZZ.lib.schedule = _sch;
        });
      } catch (e) {
      }
      JZZ.lib.openMidiOut = function(name, engine) {
        var port = new _M();
        engine._openOut(port);
        port._info = engine._info(name);
        return port;
      };
      JZZ.lib.openMidiIn = function(name, engine) {
        var port = new _M();
        engine._openIn(port);
        port._info = engine._info(name);
        return port;
      };
      JZZ.lib.registerMidiOut = function(name, engine) {
        var x = engine._info(name);
        for (var i2 = 0; i2 < _virtual._outs.length; i2++)
          if (_virtual._outs[i2].name == x.name)
            return false;
        x.engine = engine;
        _virtual._outs.push(x);
        if (_jzz) {
          _postRefresh();
          if (_jzz._bad) {
            _jzz._repair();
            _jzz._resume();
          }
        }
        return true;
      };
      JZZ.lib.registerMidiIn = function(name, engine) {
        var x = engine._info(name);
        for (var i2 = 0; i2 < _virtual._ins.length; i2++)
          if (_virtual._ins[i2].name == x.name)
            return false;
        x.engine = engine;
        _virtual._ins.push(x);
        if (_jzz) {
          _postRefresh();
          if (_jzz._bad) {
            _jzz._repair();
            _jzz._resume();
          }
        }
        return true;
      };
      var _ac;
      function _initAudioContext() {
        if (!_ac && typeof window !== "undefined") {
          var AudioContext = window.AudioContext || window.webkitAudioContext;
          if (AudioContext) {
            _ac = new AudioContext();
            if (_ac && !_ac.createGain)
              _ac.createGain = _ac.createGainNode;
            var _activateAudioContext = function() {
              if (_ac.state != "running") {
                _ac.resume();
                var osc = _ac.createOscillator();
                var gain = _ac.createGain();
                try {
                  gain.gain.value = 0;
                } catch (err) {
                }
                gain.gain.setTargetAtTime(0, _ac.currentTime, 0.01);
                osc.connect(gain);
                gain.connect(_ac.destination);
                if (!osc.start)
                  osc.start = osc.noteOn;
                if (!osc.stop)
                  osc.stop = osc.noteOff;
                osc.start(0.1);
                osc.stop(0.11);
              } else if (typeof document != "undefined") {
                document.removeEventListener("touchstart", _activateAudioContext);
                document.removeEventListener("touchend", _activateAudioContext);
                document.removeEventListener("mousedown", _activateAudioContext);
                document.removeEventListener("keydown", _activateAudioContext);
              }
            };
            if (typeof document != "undefined") {
              document.addEventListener("touchstart", _activateAudioContext);
              document.addEventListener("touchend", _activateAudioContext);
              document.addEventListener("mousedown", _activateAudioContext);
              document.addEventListener("keydown", _activateAudioContext);
            }
            _activateAudioContext();
          }
        }
      }
      JZZ.lib.copyMidiHelpers = _copyMidiHelpers;
      JZZ.lib.getAudioContext = function() {
        _initAudioContext();
        return _ac;
      };
      var _b64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
      JZZ.lib.fromBase64 = function(input) {
        var output = "";
        var chr1, chr2, chr3;
        var enc1, enc2, enc3, enc4;
        var i2 = 0;
        input = input.replace(/[^A-Za-z0-9+/=]/g, "");
        while (i2 < input.length) {
          enc1 = _b64.indexOf(input.charAt(i2++));
          enc2 = _b64.indexOf(input.charAt(i2++));
          enc3 = _b64.indexOf(input.charAt(i2++));
          enc4 = _b64.indexOf(input.charAt(i2++));
          chr1 = enc1 << 2 | enc2 >> 4;
          chr2 = (enc2 & 15) << 4 | enc3 >> 2;
          chr3 = (enc3 & 3) << 6 | enc4;
          output = output + String.fromCharCode(chr1);
          if (enc3 != 64) {
            output = output + String.fromCharCode(chr2);
          }
          if (enc4 != 64) {
            output = output + String.fromCharCode(chr3);
          }
        }
        return output;
      };
      JZZ.lib.toBase64 = function(data) {
        var o1, o2, o3, h1, h2, h3, h4, bits, i2 = 0, ac = 0, enc = "", arr = [];
        if (!data)
          return data;
        do {
          o1 = data.charCodeAt(i2++);
          o2 = data.charCodeAt(i2++);
          o3 = data.charCodeAt(i2++);
          bits = o1 << 16 | o2 << 8 | o3;
          h1 = bits >> 18 & 63;
          h2 = bits >> 12 & 63;
          h3 = bits >> 6 & 63;
          h4 = bits & 63;
          arr[ac++] = _b64.charAt(h1) + _b64.charAt(h2) + _b64.charAt(h3) + _b64.charAt(h4);
        } while (i2 < data.length);
        enc = arr.join("");
        var r = data.length % 3;
        return r ? enc.slice(0, r - 3) + "===".slice(r) : enc;
      };
      JZZ.lib.fromUTF8 = function(data) {
        data = typeof data == "undefined" ? "" : "" + data;
        var out = "";
        var i2, n2, m2;
        for (i2 = 0; i2 < data.length; i2++) {
          n2 = data.charCodeAt(i2);
          if (n2 > 255)
            return data;
          if (n2 < 128)
            out += data[i2];
          else if ((n2 & 224) == 192) {
            n2 = (n2 & 31) << 6;
            i2++;
            if (i2 >= data.length)
              return data;
            m2 = data.charCodeAt(i2);
            if ((m2 & 192) != 128)
              return data;
            n2 += m2 & 63;
            out += String.fromCharCode(n2);
          } else if ((n2 & 240) == 224) {
            n2 = (n2 & 15) << 12;
            i2++;
            if (i2 >= data.length)
              return data;
            m2 = data.charCodeAt(i2);
            if ((m2 & 192) != 128)
              return data;
            n2 += (m2 & 63) << 6;
            i2++;
            if (i2 >= data.length)
              return data;
            m2 = data.charCodeAt(i2);
            if ((m2 & 192) != 128)
              return data;
            n2 += m2 & 63;
            out += String.fromCharCode(n2);
          } else if ((n2 & 248) == 240) {
            n2 = (n2 & 7) << 18;
            i2++;
            if (i2 >= data.length)
              return data;
            m2 = data.charCodeAt(i2);
            if ((m2 & 192) != 128)
              return data;
            n2 += (m2 & 63) << 12;
            i2++;
            if (i2 >= data.length)
              return data;
            m2 = data.charCodeAt(i2);
            if ((m2 & 192) != 128)
              return data;
            n2 += (m2 & 63) << 6;
            i2++;
            if (i2 >= data.length)
              return data;
            m2 = data.charCodeAt(i2);
            if ((m2 & 192) != 128)
              return data;
            n2 += m2 & 63;
            if (n2 > 1114111)
              return data;
            n2 -= 65536;
            out += String.fromCharCode(55296 + (n2 >> 10));
            out += String.fromCharCode(56320 + (n2 & 1023));
          }
        }
        return out;
      };
      JZZ.lib.toUTF8 = function(data) {
        data = typeof data == "undefined" ? "" : "" + data;
        var out = "";
        var i2, n2;
        for (i2 = 0; i2 < data.length; i2++) {
          n2 = data.charCodeAt(i2);
          if (n2 < 128)
            out += data[i2];
          else if (n2 < 2048) {
            out += String.fromCharCode(192 + (n2 >> 6));
            out += String.fromCharCode(128 + (n2 & 63));
          } else if (n2 < 65536) {
            out += String.fromCharCode(224 + (n2 >> 12));
            out += String.fromCharCode(128 + (n2 >> 6 & 63));
            out += String.fromCharCode(128 + (n2 & 63));
          } else {
            out += String.fromCharCode(240 + (n2 >> 18));
            out += String.fromCharCode(128 + (n2 >> 12 & 63));
            out += String.fromCharCode(128 + (n2 >> 6 & 63));
            out += String.fromCharCode(128 + (n2 & 63));
          }
        }
        return out;
      };
      var _wma = [];
      var _outputMap = {};
      var _inputMap = {};
      var Promise2 = _scope.Promise;
      if (typeof Promise2 !== "function") {
        Promise2 = function(executor) {
          this.executor = executor;
        };
        Promise2.prototype.then = function(resolve, reject) {
          if (typeof resolve !== "function") {
            resolve = _nop;
          }
          if (typeof reject !== "function") {
            reject = _nop;
          }
          this.executor(resolve, reject);
        };
      }
      function DOMException(name, message, code) {
        this.name = name;
        this.message = message;
        this.code = code;
      }
      function MIDIConnectionEvent(port, target) {
        this.bubbles = false;
        this.cancelBubble = false;
        this.cancelable = false;
        this.currentTarget = target;
        this.defaultPrevented = false;
        this.eventPhase = 0;
        this.path = [];
        this.port = port;
        this.returnValue = true;
        this.srcElement = target;
        this.target = target;
        this.timeStamp = _now();
        this.type = "statechange";
      }
      function MIDIMessageEvent(port, data) {
        this.bubbles = false;
        this.cancelBubble = false;
        this.cancelable = false;
        this.currentTarget = port;
        this.data = data;
        this.defaultPrevented = false;
        this.eventPhase = 0;
        this.path = [];
        this.receivedTime = _now();
        this.returnValue = true;
        this.srcElement = port;
        this.target = port;
        this.timeStamp = this.receivedTime;
        this.type = "midimessage";
      }
      function _statechange(p, a) {
        if (p) {
          if (p.onstatechange)
            p.onstatechange(new MIDIConnectionEvent(p, p));
          if (a.onstatechange)
            a.onstatechange(new MIDIConnectionEvent(p, a));
        }
      }
      function MIDIInput(a, p) {
        var self = this;
        var _open = false;
        var _ochng = null;
        var _onmsg = null;
        this.type = "input";
        this.id = p.id;
        this.name = p.name;
        this.manufacturer = p.man;
        this.version = p.ver;
        Object.defineProperty(this, "state", { get: function() {
          return p.connected ? "connected" : "disconnected";
        }, enumerable: true });
        Object.defineProperty(this, "connection", { get: function() {
          return _open ? p.proxy ? "open" : "pending" : "closed";
        }, enumerable: true });
        Object.defineProperty(this, "onmidimessage", {
          get: function() {
            return _onmsg;
          },
          set: function(value) {
            if (_func(value)) {
              _onmsg = value;
              if (!_open)
                self.open().then(_nop, _nop);
            } else
              _onmsg = null;
          },
          enumerable: true
        });
        Object.defineProperty(this, "onstatechange", {
          get: function() {
            return _ochng;
          },
          set: function(value) {
            if (_func(value))
              _ochng = value;
            else
              _ochng = null;
          },
          enumerable: true
        });
        this.open = function() {
          return new Promise2(function(resolve, reject) {
            if (_open)
              resolve(self);
            else {
              p.open().then(function() {
                if (!_open) {
                  _open = true;
                  _statechange(self, a);
                }
                resolve(self);
              }, function() {
                reject(new DOMException("InvalidAccessError", "Port is not available", 15));
              });
            }
          });
        };
        this.close = function() {
          return new Promise2(function(resolve) {
            if (_open) {
              _open = false;
              p.close();
              _statechange(self, a);
            }
            resolve(self);
          });
        };
        Object.freeze(this);
      }
      function _split(q) {
        var i2, k2;
        while (q.length) {
          for (i2 = 0; i2 < q.length; i2++)
            if (q[i2] == parseInt(q[i2]) && q[i2] >= 128 && q[i2] <= 255 && q[i2] != 247)
              break;
          q.splice(0, i2);
          if (!q.length)
            return;
          if (q[0] == 240) {
            for (i2 = 1; i2 < q.length; i2++)
              if (q[i2] == 247)
                break;
            if (i2 == q.length)
              return;
            return q.splice(0, i2 + 1);
          } else {
            k2 = _datalen(q[0]) + 1;
            if (k2 > q.length)
              return;
            for (i2 = 1; i2 < k2; i2++)
              if (q[i2] != parseInt(q[i2]) || q[i2] < 0 || q[i2] >= 128)
                break;
            if (i2 == k2)
              return q.splice(0, i2);
            else
              q.splice(0, i2);
          }
        }
      }
      function _InputProxy(id, name, man, ver) {
        var self = this;
        this.id = id;
        this.name = name;
        this.man = man;
        this.ver = ver;
        this.connected = true;
        this.ports = [];
        this.pending = [];
        this.proxy = void 0;
        this.queue = [];
        this.onmidi = function(msg) {
          var m2;
          self.queue = self.queue.concat(msg.slice());
          for (m2 = _split(self.queue); m2; m2 = _split(self.queue)) {
            for (i = 0; i < self.ports.length; i++) {
              if (self.ports[i][0].onmidimessage && (m2[0] != 240 || self.ports[i][1])) {
                self.ports[i][0].onmidimessage(new MIDIMessageEvent(self, new Uint8Array(m2)));
              }
            }
          }
        };
      }
      _InputProxy.prototype.open = function() {
        var self = this;
        return new Promise2(function(resolve, reject) {
          var i2;
          if (self.proxy || !self.connected)
            resolve();
          else {
            self.pending.push([resolve, reject]);
            if (self.pending.length == 1) {
              JZZ().openMidiIn(self.name).or(function() {
                for (i2 = 0; i2 < self.pending.length; i2++)
                  self.pending[i2][1]();
                self.pending = [];
              }).and(function() {
                self.proxy = this;
                self.proxy.connect(self.onmidi);
                for (i2 = 0; i2 < self.pending.length; i2++)
                  self.pending[i2][0]();
                self.pending = [];
              });
            }
          }
        });
      };
      _InputProxy.prototype.close = function() {
        var i2;
        if (this.proxy) {
          for (i2 = 0; i2 < this.ports.length; i2++)
            if (this.ports[i2].connection == "open")
              return;
          this.proxy.close();
          this.proxy = void 0;
        }
      };
      _InputProxy.prototype.disconnect = function() {
        this.connected = false;
        if (this.proxy) {
          this.proxy.close();
          this.proxy = void 0;
        }
      };
      _InputProxy.prototype.reconnect = function() {
        var self = this;
        var i2, p;
        var a = [];
        this.connected = true;
        for (i2 = 0; i2 < _wma.length; i2++) {
          p = _wma[i2].inputs.get(this.id);
          if (p.connection == "closed")
            _statechange(p, _wma[i2]);
          else
            a.push([p, _wma[i2]]);
        }
        if (a.length) {
          JZZ()._openMidiInNR(self.name).or(function() {
            for (i2 = 0; i2 < a.length; i2++)
              a[i2][0].close();
          }).and(function() {
            self.proxy = this;
            self.proxy.connect(self.onmidi);
            for (i2 = 0; i2 < a.length; i2++)
              _statechange(a[i2][0], a[i2][1]);
          });
        }
      };
      function _datalen(x) {
        if (x >= 128 && x <= 191 || x >= 224 && x <= 239 || x == 242)
          return 2;
        if (x >= 192 && x <= 223 || x == 241 || x == 243)
          return 1;
        return 0;
      }
      var _epr = "Failed to execute 'send' on 'MIDIOutput': ";
      function _validate(arr, sysex) {
        var i2, k2;
        var msg;
        var data = [];
        for (i2 = 0; i2 < arr.length; i2++) {
          if (arr[i2] != parseInt(arr[i2]) || arr[i2] < 0 || arr[i2] > 255)
            throw TypeError(_epr + arr[i2] + " is not a UInt8 value.");
        }
        k2 = 0;
        for (i2 = 0; i2 < arr.length; i2++) {
          if (!k2) {
            if (arr[i2] < 128)
              throw TypeError(_epr + "Running status is not allowed at index " + i2 + " (" + arr[i2] + ").");
            if (arr[i2] == 247)
              throw TypeError(_epr + "Unexpected end of system exclusive message at index " + i2 + " (" + arr[i2] + ").");
            msg = [arr[i2]];
            data.push(msg);
            if (arr[i2] == 240) {
              if (!sysex)
                throw new DOMException("InvalidAccessError", _epr + "System exclusive messag is not allowed at index " + i2 + " (" + arr[i2] + ").", 15);
              k2 = -1;
              for (; i2 < arr.length; i2++) {
                msg.push(arr[i2]);
                if (arr[i2] == 247) {
                  k2 = 0;
                  break;
                }
              }
            } else {
              k2 = _datalen(arr[i2]);
            }
          } else {
            if (arr[i2] > 127)
              throw TypeError(_epr + "Unexpected status byte at index " + i2 + " (" + arr[i2] + ").");
            msg.push(arr[i2]);
            k2--;
          }
        }
        if (k2)
          throw TypeError(_epr + "Message is incomplete");
        return [data];
      }
      function MIDIOutput(a, p) {
        var self = this;
        var _open = false;
        var _ochng = null;
        this.type = "output";
        this.id = p.id;
        this.name = p.name;
        this.manufacturer = p.man;
        this.version = p.ver;
        Object.defineProperty(this, "state", { get: function() {
          return p.connected ? "connected" : "disconnected";
        }, enumerable: true });
        Object.defineProperty(this, "connection", { get: function() {
          return _open ? p.proxy ? "open" : "pending" : "closed";
        }, enumerable: true });
        Object.defineProperty(this, "onstatechange", {
          get: function() {
            return _ochng;
          },
          set: function(value) {
            if (_func(value))
              _ochng = value;
            else
              _ochng = null;
          },
          enumerable: true
        });
        this.open = function() {
          return new Promise2(function(resolve, reject) {
            if (_open)
              resolve(self);
            else {
              p.open().then(function() {
                if (!_open) {
                  _open = true;
                  _statechange(self, a);
                }
                resolve(self);
              }, function() {
                reject(new DOMException("InvalidAccessError", "Port is not available", 15));
              });
            }
          });
        };
        this.close = function() {
          return new Promise2(function(resolve) {
            if (_open) {
              _open = false;
              self.clear();
              p.close();
              _statechange(self, a);
            }
            resolve(self);
          });
        };
        this.clear = function() {
        };
        this.send = function(data, timestamp) {
          _validate(data, a.sysexEnabled);
          if (!p.connected)
            throw new DOMException("InvalidStateError", "Port is not connected", 11);
          if (_open) {
            var now = _now();
            if (timestamp > now)
              setTimeout(function() {
                p.proxy.send(data);
              }, timestamp - now);
            else
              p.proxy.send(data);
          } else
            this.open().then(function() {
              self.send(data, timestamp);
            }, _nop);
        };
        Object.freeze(this);
      }
      function _OutputProxy(id, name, man, ver) {
        this.id = id;
        this.name = name;
        this.man = man;
        this.ver = ver;
        this.connected = true;
        this.ports = [];
        this.pending = [];
        this.proxy = void 0;
      }
      _OutputProxy.prototype.open = function() {
        var self = this;
        return new Promise2(function(resolve, reject) {
          var i2;
          if (self.proxy || !self.connected)
            resolve();
          else {
            self.pending.push([resolve, reject]);
            if (self.pending.length == 1) {
              JZZ().openMidiOut(self.name).or(function() {
                for (i2 = 0; i2 < self.pending.length; i2++)
                  self.pending[i2][1]();
                self.pending = [];
              }).and(function() {
                self.proxy = this;
                for (i2 = 0; i2 < self.pending.length; i2++)
                  self.pending[i2][0]();
                self.pending = [];
              });
            }
          }
        });
      };
      _OutputProxy.prototype.close = function() {
        var i2;
        if (this.proxy) {
          for (i2 = 0; i2 < this.ports.length; i2++)
            if (this.ports[i2].connection == "open")
              return;
          this.proxy.close();
          this.proxy = void 0;
        }
      };
      _OutputProxy.prototype.disconnect = function() {
        this.connected = false;
        if (this.proxy) {
          this.proxy.close();
          this.proxy = void 0;
        }
      };
      _OutputProxy.prototype.reconnect = function() {
        var self = this;
        var i2, p;
        var a = [];
        this.connected = true;
        for (i2 = 0; i2 < _wma.length; i2++) {
          p = _wma[i2].outputs.get(this.id);
          if (p.connection == "closed")
            _statechange(p, _wma[i2]);
          else
            a.push([p, _wma[i2]]);
        }
        if (a.length) {
          JZZ()._openMidiOutNR(self.name).or(function() {
            for (i2 = 0; i2 < a.length; i2++)
              a[i2][0].close();
          }).and(function() {
            self.proxy = this;
            for (i2 = 0; i2 < a.length; i2++)
              _statechange(a[i2][0], a[i2][1]);
          });
        }
      };
      function _Maplike(data) {
        this.has = function(id) {
          return data.hasOwnProperty(id) && data[id].connected;
        };
        this.keys = function() {
          try {
            var m2 = /* @__PURE__ */ new Map();
            for (var id in data)
              if (this.has(id))
                m2.set(id, this.get(id));
            return m2.keys();
          } catch (e) {
          }
        };
        this.values = function() {
          try {
            var m2 = /* @__PURE__ */ new Map();
            for (var id in data)
              if (this.has(id))
                m2.set(id, this.get(id));
            return m2.values();
          } catch (e) {
          }
        };
        this.entries = function() {
          try {
            var m2 = /* @__PURE__ */ new Map();
            for (var id in data)
              if (this.has(id))
                m2.set(id, this.get(id));
            return m2.entries();
          } catch (e) {
          }
        };
        this.forEach = function(fun, self) {
          if (typeof self == "undefined")
            self = this;
          for (var id in data)
            if (this.has(id))
              fun.call(self, this.get(id), id, this);
        };
        Object.defineProperty(this, "size", {
          get: function() {
            var len = 0;
            for (var id in data)
              if (this.has(id))
                len++;
            return len;
          },
          enumerable: true
        });
      }
      function MIDIInputMap(_access, _inputs) {
        this.get = function(id) {
          if (_inputMap.hasOwnProperty(id) && _inputMap[id].connected) {
            if (!_inputs[id]) {
              _inputs[id] = new MIDIInput(_access, _inputMap[id]);
              _inputMap[id].ports.push([_inputs[id], _access.sysexEnabled]);
            }
            return _inputs[id];
          }
        };
        Object.freeze(this);
      }
      MIDIInputMap.prototype = new _Maplike(_inputMap);
      MIDIInputMap.prototype.constructor = MIDIInputMap;
      function MIDIOutputMap(_access, _outputs) {
        this.get = function(id) {
          if (_outputMap.hasOwnProperty(id) && _outputMap[id].connected) {
            if (!_outputs[id]) {
              _outputs[id] = new MIDIOutput(_access, _outputMap[id]);
              _outputMap[id].ports.push([_outputs[id], _access.sysexEnabled]);
            }
            return _outputs[id];
          }
        };
        Object.freeze(this);
      }
      MIDIOutputMap.prototype = new _Maplike(_outputMap);
      MIDIOutputMap.prototype.constructor = MIDIOutputMap;
      function _wm_watch(x) {
        var i2, k2, p, a;
        for (i2 = 0; i2 < x.inputs.added.length; i2++) {
          p = x.inputs.added[i2];
          if (!_inputMap.hasOwnProperty(p.id))
            _inputMap[p.id] = new _InputProxy(p.id, p.name, p.manufacturer, p.version);
          _inputMap[p.id].reconnect();
        }
        for (i2 = 0; i2 < x.outputs.added.length; i2++) {
          p = x.outputs.added[i2];
          if (!_outputMap.hasOwnProperty(p.id))
            _outputMap[p.id] = new _OutputProxy(p.id, p.name, p.manufacturer, p.version);
          _outputMap[p.id].reconnect();
        }
        for (i2 = 0; i2 < x.inputs.removed.length; i2++) {
          p = x.inputs.removed[i2];
          if (_inputMap.hasOwnProperty(p.id)) {
            a = [];
            for (k2 = 0; k2 < _wma.length; k2++)
              a.push([_wma[k2].inputs.get(p.id), _wma[k2]]);
            _inputMap[p.id].disconnect();
            for (k2 = 0; k2 < a.length; k2++)
              _statechange(a[k2][0], a[k2][1]);
          }
        }
        for (i2 = 0; i2 < x.outputs.removed.length; i2++) {
          p = x.outputs.removed[i2];
          if (_outputMap.hasOwnProperty(p.id)) {
            a = [];
            for (k2 = 0; k2 < _wma.length; k2++)
              a.push([_wma[k2].outputs.get(p.id), _wma[k2]]);
            _outputMap[p.id].disconnect();
            for (k2 = 0; k2 < a.length; k2++)
              _statechange(a[k2][0], a[k2][1]);
          }
        }
      }
      function MIDIAccess(sysex) {
        var _inputs = {};
        var _outputs = {};
        var _onstatechange = null;
        var self = this;
        this.sysexEnabled = sysex;
        this.inputs = new MIDIInputMap(self, _inputs);
        this.outputs = new MIDIOutputMap(self, _outputs);
        Object.defineProperty(this, "onstatechange", {
          get: function() {
            return _onstatechange;
          },
          set: function(f) {
            _onstatechange = _func(f) ? f : null;
          },
          enumerable: true
        });
        Object.freeze(this);
        var i2;
        var p;
        var info = _jzz._info;
        for (i2 = 0; i2 < info.inputs.length; i2++) {
          p = info.inputs[i2];
          if (!_inputMap.hasOwnProperty(p.id))
            _inputMap[p.id] = new _InputProxy(p.id, p.name, p.manufacturer, p.version);
        }
        for (i2 = 0; i2 < info.outputs.length; i2++) {
          p = info.outputs[i2];
          if (!_outputMap.hasOwnProperty(p.id))
            _outputMap[p.id] = new _OutputProxy(p.id, p.name, p.manufacturer, p.version);
        }
        if (!_wma.length)
          JZZ().onChange(_wm_watch);
        _wma.push(this);
      }
      JZZ.requestMIDIAccess = function(opt) {
        return new Promise2(function(resolve, reject) {
          JZZ.JZZ(opt).or(function() {
          }).and(function() {
            var sysex = !!(opt && opt.sysex);
            if (sysex && !this.info().sysex)
              reject(new DOMException("SecurityError", "Sysex is not allowed", 18));
            else {
              var wma = new MIDIAccess(sysex);
              resolve(wma);
            }
          });
        });
      };
      if (typeof navigator !== "undefined" && !navigator.requestMIDIAccess)
        navigator.requestMIDIAccess = JZZ.requestMIDIAccess;
      JZZ.close = function() {
        if (_engine._close)
          _engine._close();
      };
      return JZZ;
    });
  }
});
export default require_JZZ();
//# sourceMappingURL=jzz.js.map
